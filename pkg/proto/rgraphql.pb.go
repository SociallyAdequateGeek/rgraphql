// Code generated by protoc-gen-go.
// source: src/rgraphql.proto
// DO NOT EDIT!

/*
Package rgraphql is a generated protocol buffer package.

It is generated from these files:
	src/rgraphql.proto

It has these top-level messages:
	RGQLQueryFieldDirective
	RGQLQueryTreeNode
	FieldArgument
	ASTVariable
	RGQLClientMessage
	RGQLTreeMutation
	RGQLSerialOperation
	RGQLServerMessage
	RGQLSerialResponse
	RGQLSerialError
	RGQLQueryError
	RGQLValueMutation
*/
package rgraphql

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type RGQLTreeMutation_SubtreeOperation int32

const (
	// Add a child tree to the subtree.
	RGQLTreeMutation_SUBTREE_ADD_CHILD RGQLTreeMutation_SubtreeOperation = 0
	// Delete a tree node and all children.
	RGQLTreeMutation_SUBTREE_DELETE RGQLTreeMutation_SubtreeOperation = 1
)

var RGQLTreeMutation_SubtreeOperation_name = map[int32]string{
	0: "SUBTREE_ADD_CHILD",
	1: "SUBTREE_DELETE",
}
var RGQLTreeMutation_SubtreeOperation_value = map[string]int32{
	"SUBTREE_ADD_CHILD": 0,
	"SUBTREE_DELETE":    1,
}

func (x RGQLTreeMutation_SubtreeOperation) String() string {
	return proto.EnumName(RGQLTreeMutation_SubtreeOperation_name, int32(x))
}
func (RGQLTreeMutation_SubtreeOperation) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{5, 0}
}

// Types of serial operations available.
type RGQLSerialOperation_SerialOperationType int32

const (
	RGQLSerialOperation_MUTATION RGQLSerialOperation_SerialOperationType = 0
)

var RGQLSerialOperation_SerialOperationType_name = map[int32]string{
	0: "MUTATION",
}
var RGQLSerialOperation_SerialOperationType_value = map[string]int32{
	"MUTATION": 0,
}

func (x RGQLSerialOperation_SerialOperationType) String() string {
	return proto.EnumName(RGQLSerialOperation_SerialOperationType_name, int32(x))
}
func (RGQLSerialOperation_SerialOperationType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{6, 0}
}

type RGQLValueMutation_ValueOperation int32

const (
	// Set/create the value of this resolver.
	RGQLValueMutation_VALUE_SET RGQLValueMutation_ValueOperation = 0
	// Error this resolver (the value will enter the errored state).
	RGQLValueMutation_VALUE_ERROR RGQLValueMutation_ValueOperation = 1
	// Delete this resolver
	RGQLValueMutation_VALUE_DELETE RGQLValueMutation_ValueOperation = 2
)

var RGQLValueMutation_ValueOperation_name = map[int32]string{
	0: "VALUE_SET",
	1: "VALUE_ERROR",
	2: "VALUE_DELETE",
}
var RGQLValueMutation_ValueOperation_value = map[string]int32{
	"VALUE_SET":    0,
	"VALUE_ERROR":  1,
	"VALUE_DELETE": 2,
}

func (x RGQLValueMutation_ValueOperation) String() string {
	return proto.EnumName(RGQLValueMutation_ValueOperation_name, int32(x))
}
func (RGQLValueMutation_ValueOperation) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{11, 0}
}

type RGQLQueryFieldDirective struct {
	// Directive name
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// Optional arguments.
	Args []*FieldArgument `protobuf:"bytes,2,rep,name=args" json:"args,omitempty"`
}

func (m *RGQLQueryFieldDirective) Reset()                    { *m = RGQLQueryFieldDirective{} }
func (m *RGQLQueryFieldDirective) String() string            { return proto.CompactTextString(m) }
func (*RGQLQueryFieldDirective) ProtoMessage()               {}
func (*RGQLQueryFieldDirective) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *RGQLQueryFieldDirective) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *RGQLQueryFieldDirective) GetArgs() []*FieldArgument {
	if m != nil {
		return m.Args
	}
	return nil
}

type RGQLQueryTreeNode struct {
	// Integer ID of the node.
	Id uint32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// Name of the field this node represents.
	FieldName string `protobuf:"bytes,2,opt,name=field_name,json=fieldName" json:"field_name,omitempty"`
	// Arguments.
	Args []*FieldArgument `protobuf:"bytes,3,rep,name=args" json:"args,omitempty"`
	// Directives
	Directive []*RGQLQueryFieldDirective `protobuf:"bytes,4,rep,name=directive" json:"directive,omitempty"`
	// Children
	Children []*RGQLQueryTreeNode `protobuf:"bytes,5,rep,name=children" json:"children,omitempty"`
}

func (m *RGQLQueryTreeNode) Reset()                    { *m = RGQLQueryTreeNode{} }
func (m *RGQLQueryTreeNode) String() string            { return proto.CompactTextString(m) }
func (*RGQLQueryTreeNode) ProtoMessage()               {}
func (*RGQLQueryTreeNode) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *RGQLQueryTreeNode) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *RGQLQueryTreeNode) GetFieldName() string {
	if m != nil {
		return m.FieldName
	}
	return ""
}

func (m *RGQLQueryTreeNode) GetArgs() []*FieldArgument {
	if m != nil {
		return m.Args
	}
	return nil
}

func (m *RGQLQueryTreeNode) GetDirective() []*RGQLQueryFieldDirective {
	if m != nil {
		return m.Directive
	}
	return nil
}

func (m *RGQLQueryTreeNode) GetChildren() []*RGQLQueryTreeNode {
	if m != nil {
		return m.Children
	}
	return nil
}

type FieldArgument struct {
	Name       string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	VariableId uint32 `protobuf:"varint,2,opt,name=variable_id,json=variableId" json:"variable_id,omitempty"`
}

func (m *FieldArgument) Reset()                    { *m = FieldArgument{} }
func (m *FieldArgument) String() string            { return proto.CompactTextString(m) }
func (*FieldArgument) ProtoMessage()               {}
func (*FieldArgument) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *FieldArgument) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *FieldArgument) GetVariableId() uint32 {
	if m != nil {
		return m.VariableId
	}
	return 0
}

type ASTVariable struct {
	Id        uint32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	JsonValue string `protobuf:"bytes,2,opt,name=json_value,json=jsonValue" json:"json_value,omitempty"`
}

func (m *ASTVariable) Reset()                    { *m = ASTVariable{} }
func (m *ASTVariable) String() string            { return proto.CompactTextString(m) }
func (*ASTVariable) ProtoMessage()               {}
func (*ASTVariable) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *ASTVariable) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *ASTVariable) GetJsonValue() string {
	if m != nil {
		return m.JsonValue
	}
	return ""
}

// Messages
type RGQLClientMessage struct {
	MutateTree *RGQLTreeMutation `protobuf:"bytes,1,opt,name=mutate_tree,json=mutateTree" json:"mutate_tree,omitempty"`
	// reserved 2
	SerialOperation *RGQLSerialOperation `protobuf:"bytes,3,opt,name=serial_operation,json=serialOperation" json:"serial_operation,omitempty"`
}

func (m *RGQLClientMessage) Reset()                    { *m = RGQLClientMessage{} }
func (m *RGQLClientMessage) String() string            { return proto.CompactTextString(m) }
func (*RGQLClientMessage) ProtoMessage()               {}
func (*RGQLClientMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *RGQLClientMessage) GetMutateTree() *RGQLTreeMutation {
	if m != nil {
		return m.MutateTree
	}
	return nil
}

func (m *RGQLClientMessage) GetSerialOperation() *RGQLSerialOperation {
	if m != nil {
		return m.SerialOperation
	}
	return nil
}

type RGQLTreeMutation struct {
	// All node mutations in this step.
	NodeMutation []*RGQLTreeMutation_NodeMutation `protobuf:"bytes,1,rep,name=node_mutation,json=nodeMutation" json:"node_mutation,omitempty"`
	// Any new variables.
	Variables []*ASTVariable `protobuf:"bytes,2,rep,name=variables" json:"variables,omitempty"`
}

func (m *RGQLTreeMutation) Reset()                    { *m = RGQLTreeMutation{} }
func (m *RGQLTreeMutation) String() string            { return proto.CompactTextString(m) }
func (*RGQLTreeMutation) ProtoMessage()               {}
func (*RGQLTreeMutation) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *RGQLTreeMutation) GetNodeMutation() []*RGQLTreeMutation_NodeMutation {
	if m != nil {
		return m.NodeMutation
	}
	return nil
}

func (m *RGQLTreeMutation) GetVariables() []*ASTVariable {
	if m != nil {
		return m.Variables
	}
	return nil
}

type RGQLTreeMutation_NodeMutation struct {
	// ID of the node we are operating on.
	NodeId uint32 `protobuf:"varint,1,opt,name=node_id,json=nodeId" json:"node_id,omitempty"`
	// Operation we are taking.
	Operation RGQLTreeMutation_SubtreeOperation `protobuf:"varint,2,opt,name=operation,enum=rgraphql.RGQLTreeMutation_SubtreeOperation" json:"operation,omitempty"`
	// The new node tree to add, if we are adding a child.
	Node *RGQLQueryTreeNode `protobuf:"bytes,3,opt,name=node" json:"node,omitempty"`
}

func (m *RGQLTreeMutation_NodeMutation) Reset()         { *m = RGQLTreeMutation_NodeMutation{} }
func (m *RGQLTreeMutation_NodeMutation) String() string { return proto.CompactTextString(m) }
func (*RGQLTreeMutation_NodeMutation) ProtoMessage()    {}
func (*RGQLTreeMutation_NodeMutation) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{5, 0}
}

func (m *RGQLTreeMutation_NodeMutation) GetNodeId() uint32 {
	if m != nil {
		return m.NodeId
	}
	return 0
}

func (m *RGQLTreeMutation_NodeMutation) GetOperation() RGQLTreeMutation_SubtreeOperation {
	if m != nil {
		return m.Operation
	}
	return RGQLTreeMutation_SUBTREE_ADD_CHILD
}

func (m *RGQLTreeMutation_NodeMutation) GetNode() *RGQLQueryTreeNode {
	if m != nil {
		return m.Node
	}
	return nil
}

// A single serial operation, with a single response, like a mutation.
type RGQLSerialOperation struct {
	// The ID of this serial operation to use when communicating the result.
	OperationId uint32 `protobuf:"varint,1,opt,name=operation_id,json=operationId" json:"operation_id,omitempty"`
	// The type of this serial operation.
	OperationType RGQLSerialOperation_SerialOperationType `protobuf:"varint,2,opt,name=operation_type,json=operationType,enum=rgraphql.RGQLSerialOperation_SerialOperationType" json:"operation_type,omitempty"`
	// All variables used in this operation.
	Variables []*ASTVariable `protobuf:"bytes,3,rep,name=variables" json:"variables,omitempty"`
	// The query tree for the mutation.
	QueryRoot *RGQLQueryTreeNode `protobuf:"bytes,4,opt,name=query_root,json=queryRoot" json:"query_root,omitempty"`
}

func (m *RGQLSerialOperation) Reset()                    { *m = RGQLSerialOperation{} }
func (m *RGQLSerialOperation) String() string            { return proto.CompactTextString(m) }
func (*RGQLSerialOperation) ProtoMessage()               {}
func (*RGQLSerialOperation) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *RGQLSerialOperation) GetOperationId() uint32 {
	if m != nil {
		return m.OperationId
	}
	return 0
}

func (m *RGQLSerialOperation) GetOperationType() RGQLSerialOperation_SerialOperationType {
	if m != nil {
		return m.OperationType
	}
	return RGQLSerialOperation_MUTATION
}

func (m *RGQLSerialOperation) GetVariables() []*ASTVariable {
	if m != nil {
		return m.Variables
	}
	return nil
}

func (m *RGQLSerialOperation) GetQueryRoot() *RGQLQueryTreeNode {
	if m != nil {
		return m.QueryRoot
	}
	return nil
}

type RGQLServerMessage struct {
	MutateValue    *RGQLValueMutation  `protobuf:"bytes,1,opt,name=mutate_value,json=mutateValue" json:"mutate_value,omitempty"`
	QueryError     *RGQLQueryError     `protobuf:"bytes,2,opt,name=query_error,json=queryError" json:"query_error,omitempty"`
	SerialResponse *RGQLSerialResponse `protobuf:"bytes,3,opt,name=serial_response,json=serialResponse" json:"serial_response,omitempty"`
}

func (m *RGQLServerMessage) Reset()                    { *m = RGQLServerMessage{} }
func (m *RGQLServerMessage) String() string            { return proto.CompactTextString(m) }
func (*RGQLServerMessage) ProtoMessage()               {}
func (*RGQLServerMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *RGQLServerMessage) GetMutateValue() *RGQLValueMutation {
	if m != nil {
		return m.MutateValue
	}
	return nil
}

func (m *RGQLServerMessage) GetQueryError() *RGQLQueryError {
	if m != nil {
		return m.QueryError
	}
	return nil
}

func (m *RGQLServerMessage) GetSerialResponse() *RGQLSerialResponse {
	if m != nil {
		return m.SerialResponse
	}
	return nil
}

type RGQLSerialResponse struct {
	// Operation ID specified in the request.
	OperationId uint32 `protobuf:"varint,1,opt,name=operation_id,json=operationId" json:"operation_id,omitempty"`
	// Response object.
	ResponseJson string `protobuf:"bytes,2,opt,name=response_json,json=responseJson" json:"response_json,omitempty"`
	// Query error.
	QueryError *RGQLQueryError `protobuf:"bytes,3,opt,name=query_error,json=queryError" json:"query_error,omitempty"`
	// Response error.
	ResolveError *RGQLSerialError `protobuf:"bytes,4,opt,name=resolve_error,json=resolveError" json:"resolve_error,omitempty"`
}

func (m *RGQLSerialResponse) Reset()                    { *m = RGQLSerialResponse{} }
func (m *RGQLSerialResponse) String() string            { return proto.CompactTextString(m) }
func (*RGQLSerialResponse) ProtoMessage()               {}
func (*RGQLSerialResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *RGQLSerialResponse) GetOperationId() uint32 {
	if m != nil {
		return m.OperationId
	}
	return 0
}

func (m *RGQLSerialResponse) GetResponseJson() string {
	if m != nil {
		return m.ResponseJson
	}
	return ""
}

func (m *RGQLSerialResponse) GetQueryError() *RGQLQueryError {
	if m != nil {
		return m.QueryError
	}
	return nil
}

func (m *RGQLSerialResponse) GetResolveError() *RGQLSerialError {
	if m != nil {
		return m.ResolveError
	}
	return nil
}

// Communicating a failure in a serial request.
type RGQLSerialError struct {
	ErrorJson string `protobuf:"bytes,1,opt,name=error_json,json=errorJson" json:"error_json,omitempty"`
}

func (m *RGQLSerialError) Reset()                    { *m = RGQLSerialError{} }
func (m *RGQLSerialError) String() string            { return proto.CompactTextString(m) }
func (*RGQLSerialError) ProtoMessage()               {}
func (*RGQLSerialError) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *RGQLSerialError) GetErrorJson() string {
	if m != nil {
		return m.ErrorJson
	}
	return ""
}

// Communicating a failure in the input query.
type RGQLQueryError struct {
	QueryNodeId uint32 `protobuf:"varint,1,opt,name=query_node_id,json=queryNodeId" json:"query_node_id,omitempty"`
	ErrorJson   string `protobuf:"bytes,2,opt,name=error_json,json=errorJson" json:"error_json,omitempty"`
}

func (m *RGQLQueryError) Reset()                    { *m = RGQLQueryError{} }
func (m *RGQLQueryError) String() string            { return proto.CompactTextString(m) }
func (*RGQLQueryError) ProtoMessage()               {}
func (*RGQLQueryError) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *RGQLQueryError) GetQueryNodeId() uint32 {
	if m != nil {
		return m.QueryNodeId
	}
	return 0
}

func (m *RGQLQueryError) GetErrorJson() string {
	if m != nil {
		return m.ErrorJson
	}
	return ""
}

type RGQLValueMutation struct {
	// The ID of the resolver execution (the value identifier).
	ValueNodeId uint32 `protobuf:"varint,1,opt,name=value_node_id,json=valueNodeId" json:"value_node_id,omitempty"`
	// The ID of the parent resolver execution (the parent value identifier).
	ParentValueNodeId uint32 `protobuf:"varint,2,opt,name=parent_value_node_id,json=parentValueNodeId" json:"parent_value_node_id,omitempty"`
	// The ID of the query node (the query identifier).
	QueryNodeId uint32 `protobuf:"varint,3,opt,name=query_node_id,json=queryNodeId" json:"query_node_id,omitempty"`
	// The operation on the value.
	Operation RGQLValueMutation_ValueOperation `protobuf:"varint,4,opt,name=operation,enum=rgraphql.RGQLValueMutation_ValueOperation" json:"operation,omitempty"`
	// The actual value itself
	ValueJson string `protobuf:"bytes,5,opt,name=value_json,json=valueJson" json:"value_json,omitempty"`
	// Do we have a value to set?
	HasValue bool `protobuf:"varint,6,opt,name=has_value,json=hasValue" json:"has_value,omitempty"`
	// Is this a container for an array?
	IsArray bool `protobuf:"varint,7,opt,name=is_array,json=isArray" json:"is_array,omitempty"`
	// If is_array and length is known in advance.
	ArrayLen uint32 `protobuf:"varint,8,opt,name=array_len,json=arrayLen" json:"array_len,omitempty"`
	// If is an ordered array element. 1-based index.
	ArrayIdx uint32 `protobuf:"varint,9,opt,name=array_idx,json=arrayIdx" json:"array_idx,omitempty"`
}

func (m *RGQLValueMutation) Reset()                    { *m = RGQLValueMutation{} }
func (m *RGQLValueMutation) String() string            { return proto.CompactTextString(m) }
func (*RGQLValueMutation) ProtoMessage()               {}
func (*RGQLValueMutation) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *RGQLValueMutation) GetValueNodeId() uint32 {
	if m != nil {
		return m.ValueNodeId
	}
	return 0
}

func (m *RGQLValueMutation) GetParentValueNodeId() uint32 {
	if m != nil {
		return m.ParentValueNodeId
	}
	return 0
}

func (m *RGQLValueMutation) GetQueryNodeId() uint32 {
	if m != nil {
		return m.QueryNodeId
	}
	return 0
}

func (m *RGQLValueMutation) GetOperation() RGQLValueMutation_ValueOperation {
	if m != nil {
		return m.Operation
	}
	return RGQLValueMutation_VALUE_SET
}

func (m *RGQLValueMutation) GetValueJson() string {
	if m != nil {
		return m.ValueJson
	}
	return ""
}

func (m *RGQLValueMutation) GetHasValue() bool {
	if m != nil {
		return m.HasValue
	}
	return false
}

func (m *RGQLValueMutation) GetIsArray() bool {
	if m != nil {
		return m.IsArray
	}
	return false
}

func (m *RGQLValueMutation) GetArrayLen() uint32 {
	if m != nil {
		return m.ArrayLen
	}
	return 0
}

func (m *RGQLValueMutation) GetArrayIdx() uint32 {
	if m != nil {
		return m.ArrayIdx
	}
	return 0
}

func init() {
	proto.RegisterType((*RGQLQueryFieldDirective)(nil), "rgraphql.RGQLQueryFieldDirective")
	proto.RegisterType((*RGQLQueryTreeNode)(nil), "rgraphql.RGQLQueryTreeNode")
	proto.RegisterType((*FieldArgument)(nil), "rgraphql.FieldArgument")
	proto.RegisterType((*ASTVariable)(nil), "rgraphql.ASTVariable")
	proto.RegisterType((*RGQLClientMessage)(nil), "rgraphql.RGQLClientMessage")
	proto.RegisterType((*RGQLTreeMutation)(nil), "rgraphql.RGQLTreeMutation")
	proto.RegisterType((*RGQLTreeMutation_NodeMutation)(nil), "rgraphql.RGQLTreeMutation.NodeMutation")
	proto.RegisterType((*RGQLSerialOperation)(nil), "rgraphql.RGQLSerialOperation")
	proto.RegisterType((*RGQLServerMessage)(nil), "rgraphql.RGQLServerMessage")
	proto.RegisterType((*RGQLSerialResponse)(nil), "rgraphql.RGQLSerialResponse")
	proto.RegisterType((*RGQLSerialError)(nil), "rgraphql.RGQLSerialError")
	proto.RegisterType((*RGQLQueryError)(nil), "rgraphql.RGQLQueryError")
	proto.RegisterType((*RGQLValueMutation)(nil), "rgraphql.RGQLValueMutation")
	proto.RegisterEnum("rgraphql.RGQLTreeMutation_SubtreeOperation", RGQLTreeMutation_SubtreeOperation_name, RGQLTreeMutation_SubtreeOperation_value)
	proto.RegisterEnum("rgraphql.RGQLSerialOperation_SerialOperationType", RGQLSerialOperation_SerialOperationType_name, RGQLSerialOperation_SerialOperationType_value)
	proto.RegisterEnum("rgraphql.RGQLValueMutation_ValueOperation", RGQLValueMutation_ValueOperation_name, RGQLValueMutation_ValueOperation_value)
}

func init() { proto.RegisterFile("src/rgraphql.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 919 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x94, 0x56, 0xcd, 0x6e, 0xdb, 0x46,
	0x10, 0x36, 0x25, 0xc5, 0x16, 0x87, 0x92, 0x4c, 0x6f, 0x1a, 0x98, 0x49, 0x6a, 0xd4, 0x61, 0x0e,
	0x35, 0x1a, 0x40, 0x6e, 0x9d, 0x43, 0xd1, 0xbf, 0x14, 0x4a, 0xc4, 0xd6, 0x2a, 0x64, 0x1b, 0x59,
	0xc9, 0x46, 0xd1, 0x0b, 0x41, 0x9b, 0x5b, 0x9b, 0x05, 0x4d, 0x2a, 0x4b, 0x4a, 0x88, 0x5f, 0xa5,
	0xd7, 0x5e, 0x0a, 0xf4, 0x79, 0x8a, 0x3e, 0x43, 0x5f, 0xa1, 0xa7, 0x62, 0x67, 0x97, 0x7f, 0x32,
	0xad, 0xba, 0x37, 0xce, 0xb7, 0x33, 0xb3, 0xdf, 0x7c, 0x3b, 0x33, 0x12, 0x90, 0x84, 0x5f, 0xec,
	0xf3, 0x4b, 0xee, 0xcd, 0xae, 0xde, 0x85, 0xfd, 0x19, 0x8f, 0xd3, 0x98, 0xb4, 0x33, 0xdb, 0xfe,
	0x09, 0xb6, 0xe9, 0xf7, 0x6f, 0xc7, 0x6f, 0xe7, 0x8c, 0xdf, 0x7c, 0x17, 0xb0, 0xd0, 0x1f, 0x06,
	0x9c, 0x5d, 0xa4, 0xc1, 0x82, 0x11, 0x02, 0xad, 0xc8, 0xbb, 0x66, 0x96, 0xb6, 0xab, 0xed, 0xe9,
	0x14, 0xbf, 0xc9, 0x0b, 0x68, 0x79, 0xfc, 0x32, 0xb1, 0x1a, 0xbb, 0xcd, 0x3d, 0xe3, 0x60, 0xbb,
	0x9f, 0xe7, 0xc5, 0xd8, 0x01, 0xbf, 0x9c, 0x5f, 0xb3, 0x28, 0xa5, 0xe8, 0x64, 0xff, 0xad, 0xc1,
	0x56, 0x9e, 0x7c, 0xca, 0x19, 0x3b, 0x8e, 0x7d, 0x46, 0x7a, 0xd0, 0x08, 0x7c, 0x4c, 0xda, 0xa5,
	0x8d, 0xc0, 0x27, 0x3b, 0x00, 0x3f, 0x8b, 0x60, 0x17, 0x2f, 0x6b, 0xe0, 0x65, 0x3a, 0x22, 0xc7,
	0xe5, 0x1b, 0x9b, 0xf7, 0xb8, 0x91, 0x7c, 0x0b, 0xba, 0x9f, 0xf1, 0xb7, 0x5a, 0x18, 0xf1, 0xac,
	0x88, 0xb8, 0xa3, 0x50, 0x5a, 0xc4, 0x90, 0xcf, 0xa1, 0x7d, 0x71, 0x15, 0x84, 0x3e, 0x67, 0x91,
	0xf5, 0x00, 0xe3, 0x9f, 0xd6, 0xc4, 0x67, 0xb5, 0xd0, 0xdc, 0xd9, 0x1e, 0x42, 0xb7, 0x42, 0xa8,
	0x56, 0xbd, 0x8f, 0xc0, 0x58, 0x78, 0x3c, 0xf0, 0xce, 0x43, 0xe6, 0x06, 0x3e, 0xd6, 0xda, 0xa5,
	0x90, 0x41, 0x23, 0xdf, 0xfe, 0x1a, 0x8c, 0xc1, 0x64, 0x7a, 0xa6, 0x80, 0x3a, 0xa9, 0x7e, 0x49,
	0xe2, 0xc8, 0x5d, 0x78, 0xe1, 0x3c, 0x97, 0x4a, 0x20, 0x67, 0x02, 0xb0, 0x7f, 0x55, 0x7a, 0xbf,
	0x09, 0x03, 0x16, 0xa5, 0x47, 0x2c, 0x49, 0xbc, 0x4b, 0x46, 0xbe, 0x02, 0xe3, 0x7a, 0x9e, 0x7a,
	0x29, 0x73, 0x53, 0xce, 0x24, 0x1f, 0xe3, 0xe0, 0x49, 0xb5, 0x2a, 0x51, 0xd0, 0x91, 0x70, 0x0a,
	0xe2, 0x88, 0x82, 0x74, 0x17, 0x18, 0x39, 0x04, 0x33, 0x61, 0x3c, 0xf0, 0x42, 0x37, 0x9e, 0x31,
	0x8e, 0xe7, 0x56, 0x13, 0x33, 0xec, 0x54, 0x33, 0x4c, 0xd0, 0xeb, 0x24, 0x73, 0xa2, 0x9b, 0x49,
	0x15, 0xb0, 0xff, 0x69, 0x80, 0xb9, 0x7c, 0x15, 0x19, 0x43, 0x37, 0x8a, 0x7d, 0xe6, 0x5e, 0x2b,
	0xc0, 0xd2, 0x50, 0xf3, 0x8f, 0xef, 0x66, 0xd7, 0x17, 0xba, 0xe7, 0x54, 0x3b, 0x51, 0xc9, 0x22,
	0x2f, 0x41, 0xcf, 0xb4, 0xcc, 0x3a, 0xf4, 0x51, 0x91, 0xa9, 0x24, 0x2c, 0x2d, 0xfc, 0x9e, 0xfc,
	0xa6, 0x41, 0xa7, 0x9c, 0x93, 0x6c, 0xc3, 0x06, 0x72, 0xca, 0x95, 0x5f, 0x17, 0xe6, 0xc8, 0x27,
	0x23, 0xd0, 0x0b, 0x11, 0x84, 0xf8, 0xbd, 0x83, 0x17, 0x2b, 0x88, 0x4e, 0xe6, 0xe7, 0x42, 0xf0,
	0x42, 0x92, 0x22, 0x9a, 0xec, 0x43, 0x4b, 0x24, 0x55, 0x52, 0xae, 0x6c, 0x31, 0x74, 0xb4, 0xbf,
	0x01, 0x73, 0x39, 0x1f, 0x79, 0x04, 0x5b, 0x93, 0xd3, 0xd7, 0x53, 0xea, 0x38, 0xee, 0x60, 0x38,
	0x74, 0xdf, 0x1c, 0x8e, 0xc6, 0x43, 0x73, 0x8d, 0x10, 0xe8, 0x65, 0xf0, 0xd0, 0x19, 0x3b, 0x53,
	0xc7, 0xd4, 0xec, 0xdf, 0x1b, 0xf0, 0xb0, 0xe6, 0x95, 0xc8, 0x33, 0xe8, 0xe4, 0xa4, 0x8a, 0x82,
	0x8d, 0x1c, 0x1b, 0xf9, 0xe4, 0x47, 0xe8, 0x15, 0x2e, 0xe9, 0xcd, 0x8c, 0xa9, 0xd2, 0x3f, 0x5b,
	0xf9, 0xfe, 0xfd, 0x25, 0x7b, 0x7a, 0x33, 0x63, 0xb4, 0x1b, 0x97, 0xcd, 0xea, 0x73, 0x35, 0xef,
	0xf7, 0x5c, 0xe4, 0x4b, 0x80, 0x77, 0x42, 0x1f, 0x97, 0xc7, 0x71, 0x6a, 0xb5, 0xfe, 0x5b, 0x3f,
	0x1d, 0xdd, 0x69, 0x1c, 0xa7, 0xf6, 0x73, 0x78, 0x58, 0x43, 0x8b, 0x74, 0xa0, 0x7d, 0x74, 0x3a,
	0x1d, 0x4c, 0x47, 0x27, 0xc7, 0xe6, 0x9a, 0xfd, 0xa7, 0x1a, 0xa2, 0x09, 0xe3, 0x0b, 0xc6, 0xb3,
	0x21, 0x7a, 0x05, 0x1d, 0x35, 0x44, 0x72, 0xf6, 0xb4, 0xba, 0x8b, 0x71, 0x0a, 0xf3, 0xde, 0x54,
	0x53, 0x87, 0x20, 0xf9, 0x02, 0x0c, 0x49, 0x9b, 0x71, 0x1e, 0x73, 0x94, 0xd0, 0x38, 0xb0, 0x6a,
	0x78, 0x3b, 0xe2, 0x9c, 0xca, 0x1a, 0xf1, 0x9b, 0x38, 0xa0, 0x66, 0xc9, 0xe5, 0x2c, 0x99, 0xc5,
	0x51, 0x92, 0xb5, 0xcd, 0x87, 0x75, 0x2f, 0x40, 0x95, 0x0f, 0xed, 0x25, 0x15, 0xdb, 0xfe, 0x4b,
	0x03, 0x72, 0xdb, 0xed, 0x3e, 0x1d, 0xf0, 0x1c, 0xba, 0xd9, 0xcd, 0xae, 0x58, 0x36, 0x6a, 0xf1,
	0x74, 0x32, 0xf0, 0x87, 0x24, 0x8e, 0x96, 0x0b, 0x6c, 0xfe, 0x8f, 0x02, 0x5f, 0x61, 0xfe, 0x38,
	0x5c, 0x30, 0x15, 0x2c, 0x5f, 0xf5, 0x71, 0x5d, 0x79, 0x32, 0xba, 0xa3, 0xfc, 0xd1, 0xb2, 0x3f,
	0x85, 0xcd, 0x25, 0x07, 0xb1, 0x28, 0x31, 0x95, 0xe4, 0x2b, 0x57, 0xb0, 0x8e, 0x88, 0x20, 0x6b,
	0x4f, 0xa0, 0x57, 0xe5, 0x43, 0x6c, 0xe8, 0x4a, 0xfa, 0xd5, 0xd1, 0x97, 0x35, 0x1d, 0xcb, 0xf9,
	0xaf, 0x26, 0x6d, 0x2c, 0x27, 0xfd, 0xa3, 0x29, 0x1b, 0xa7, 0xd2, 0x05, 0x22, 0x31, 0x76, 0xcc,
	0x72, 0x62, 0x04, 0x55, 0xe2, 0x7d, 0xf8, 0x60, 0xe6, 0x71, 0x16, 0xa5, 0x6e, 0xd5, 0x55, 0xfe,
	0x3e, 0x6c, 0xc9, 0xb3, 0xb3, 0x52, 0xc0, 0x2d, 0xb6, 0xcd, 0xdb, 0x6c, 0x0f, 0xcb, 0xdb, 0xaa,
	0x85, 0x23, 0xfb, 0xc9, 0x8a, 0x76, 0xed, 0xa3, 0x55, 0xbb, 0xac, 0x76, 0x00, 0x24, 0x2f, 0xac,
	0xfb, 0x81, 0xac, 0x1b, 0x11, 0x7c, 0xf9, 0xa7, 0xa0, 0x5f, 0x79, 0x89, 0x9a, 0x8b, 0xf5, 0x5d,
	0x6d, 0xaf, 0x4d, 0xdb, 0x57, 0x5e, 0x22, 0xfb, 0xfe, 0x31, 0xb4, 0x83, 0xc4, 0xf5, 0x38, 0xf7,
	0x6e, 0xac, 0x0d, 0x3c, 0xdb, 0x08, 0x92, 0x81, 0x30, 0x45, 0x1c, 0xe2, 0x6e, 0xc8, 0x22, 0xab,
	0x8d, 0x05, 0xb4, 0x11, 0x18, 0xb3, 0xa8, 0x38, 0x0c, 0xfc, 0xf7, 0x96, 0x5e, 0x3a, 0x1c, 0xf9,
	0xef, 0xed, 0xd7, 0xd0, 0xab, 0xb2, 0x25, 0x5d, 0xd0, 0xcf, 0x06, 0xe3, 0x53, 0xc7, 0x9d, 0x38,
	0x53, 0x73, 0x8d, 0x6c, 0x82, 0x21, 0x4d, 0x87, 0xd2, 0x13, 0x6a, 0x6a, 0xc4, 0x84, 0x8e, 0x04,
	0xd4, 0x46, 0x6c, 0x9c, 0xaf, 0xe3, 0x1f, 0xa1, 0x97, 0xff, 0x06, 0x00, 0x00, 0xff, 0xff, 0xa4,
	0x76, 0x31, 0x41, 0x1e, 0x09, 0x00, 0x00,
}
