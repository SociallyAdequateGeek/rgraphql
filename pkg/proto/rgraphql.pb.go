// Code generated by protoc-gen-go.
// source: src/rgraphql.proto
// DO NOT EDIT!

/*
Package rgraphql is a generated protocol buffer package.

It is generated from these files:
	src/rgraphql.proto

It has these top-level messages:
	RGQLQueryFieldDirective
	RGQLQueryTreeNode
*/
package rgraphql

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type RGQLQueryFieldDirective_EDirectiveKind int32

const (
	// Ignore this directive completely
	RGQLQueryFieldDirective_DIRECTIVE_NONE RGQLQueryFieldDirective_EDirectiveKind = 0
	// Live directive
	RGQLQueryFieldDirective_DIRECTIVE_LIVE RGQLQueryFieldDirective_EDirectiveKind = 1
)

var RGQLQueryFieldDirective_EDirectiveKind_name = map[int32]string{
	0: "DIRECTIVE_NONE",
	1: "DIRECTIVE_LIVE",
}
var RGQLQueryFieldDirective_EDirectiveKind_value = map[string]int32{
	"DIRECTIVE_NONE": 0,
	"DIRECTIVE_LIVE": 1,
}

func (x RGQLQueryFieldDirective_EDirectiveKind) String() string {
	return proto.EnumName(RGQLQueryFieldDirective_EDirectiveKind_name, int32(x))
}
func (RGQLQueryFieldDirective_EDirectiveKind) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{0, 0}
}

type RGQLQueryFieldDirective struct {
	// Directive type
	Kind RGQLQueryFieldDirective_EDirectiveKind `protobuf:"varint,1,opt,name=kind,enum=rgraphql.RGQLQueryFieldDirective_EDirectiveKind" json:"kind,omitempty"`
	// Optional arguments json
	ArgsJson string `protobuf:"bytes,2,opt,name=args_json,json=argsJson" json:"args_json,omitempty"`
}

func (m *RGQLQueryFieldDirective) Reset()                    { *m = RGQLQueryFieldDirective{} }
func (m *RGQLQueryFieldDirective) String() string            { return proto.CompactTextString(m) }
func (*RGQLQueryFieldDirective) ProtoMessage()               {}
func (*RGQLQueryFieldDirective) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *RGQLQueryFieldDirective) GetKind() RGQLQueryFieldDirective_EDirectiveKind {
	if m != nil {
		return m.Kind
	}
	return RGQLQueryFieldDirective_DIRECTIVE_NONE
}

func (m *RGQLQueryFieldDirective) GetArgsJson() string {
	if m != nil {
		return m.ArgsJson
	}
	return ""
}

type RGQLQueryTreeNode struct {
	// Integer ID of the node.
	Id uint32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// Name of the field this node represents.
	FieldName string `protobuf:"bytes,2,opt,name=field_name,json=fieldName" json:"field_name,omitempty"`
	// JSON-keyed map of arguments.
	ArgsJson string `protobuf:"bytes,3,opt,name=args_json,json=argsJson" json:"args_json,omitempty"`
	// Directives
	Directive []*RGQLQueryFieldDirective `protobuf:"bytes,4,rep,name=directive" json:"directive,omitempty"`
	// Children
	Children []*RGQLQueryTreeNode `protobuf:"bytes,5,rep,name=children" json:"children,omitempty"`
}

func (m *RGQLQueryTreeNode) Reset()                    { *m = RGQLQueryTreeNode{} }
func (m *RGQLQueryTreeNode) String() string            { return proto.CompactTextString(m) }
func (*RGQLQueryTreeNode) ProtoMessage()               {}
func (*RGQLQueryTreeNode) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *RGQLQueryTreeNode) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *RGQLQueryTreeNode) GetFieldName() string {
	if m != nil {
		return m.FieldName
	}
	return ""
}

func (m *RGQLQueryTreeNode) GetArgsJson() string {
	if m != nil {
		return m.ArgsJson
	}
	return ""
}

func (m *RGQLQueryTreeNode) GetDirective() []*RGQLQueryFieldDirective {
	if m != nil {
		return m.Directive
	}
	return nil
}

func (m *RGQLQueryTreeNode) GetChildren() []*RGQLQueryTreeNode {
	if m != nil {
		return m.Children
	}
	return nil
}

func init() {
	proto.RegisterType((*RGQLQueryFieldDirective)(nil), "rgraphql.RGQLQueryFieldDirective")
	proto.RegisterType((*RGQLQueryTreeNode)(nil), "rgraphql.RGQLQueryTreeNode")
	proto.RegisterEnum("rgraphql.RGQLQueryFieldDirective_EDirectiveKind", RGQLQueryFieldDirective_EDirectiveKind_name, RGQLQueryFieldDirective_EDirectiveKind_value)
}

func init() { proto.RegisterFile("src/rgraphql.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 274 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x84, 0x91, 0xc1, 0x4a, 0xc3, 0x40,
	0x10, 0x86, 0xdd, 0xb4, 0x4a, 0x32, 0x62, 0xa8, 0x73, 0x31, 0x50, 0x84, 0x98, 0x53, 0x4e, 0x51,
	0xea, 0x41, 0x6f, 0x1e, 0x4c, 0x94, 0x68, 0x89, 0x74, 0x29, 0xbd, 0x86, 0x98, 0x1d, 0xdb, 0xd5,
	0x74, 0x53, 0x37, 0x55, 0xf0, 0xc5, 0x7c, 0x17, 0xdf, 0x46, 0x1a, 0x4d, 0x24, 0xa0, 0x78, 0xdb,
	0xfd, 0x99, 0x6f, 0xe6, 0x63, 0x06, 0xb0, 0xd2, 0xf9, 0xb1, 0x9e, 0xeb, 0x6c, 0xb5, 0x78, 0x2e,
	0x82, 0x95, 0x2e, 0xd7, 0x25, 0x9a, 0xcd, 0xdf, 0x7b, 0x67, 0x70, 0xc0, 0xaf, 0x27, 0xe3, 0xc9,
	0x0b, 0xe9, 0xb7, 0x2b, 0x49, 0x85, 0x08, 0xa5, 0xa6, 0x7c, 0x2d, 0x5f, 0x09, 0x43, 0xe8, 0x3f,
	0x49, 0x25, 0x1c, 0xe6, 0x32, 0xdf, 0x1e, 0x9d, 0x04, 0x6d, 0x93, 0x3f, 0x80, 0x20, 0x6a, 0x9f,
	0xb7, 0x52, 0x09, 0x5e, 0xd3, 0x38, 0x04, 0x2b, 0xd3, 0xf3, 0x2a, 0x7d, 0xac, 0x4a, 0xe5, 0x18,
	0x2e, 0xf3, 0x2d, 0x6e, 0x6e, 0x82, 0x9b, 0xaa, 0x54, 0xde, 0x39, 0xd8, 0x5d, 0x08, 0x11, 0xec,
	0x30, 0xe6, 0xd1, 0xe5, 0x34, 0x9e, 0x45, 0x69, 0x72, 0x97, 0x44, 0x83, 0xad, 0x6e, 0x36, 0x8e,
	0x67, 0xd1, 0x80, 0x79, 0x1f, 0x0c, 0xf6, 0x5b, 0x8f, 0xa9, 0x26, 0x4a, 0x4a, 0x41, 0x68, 0x83,
	0x21, 0xbf, 0x84, 0xf7, 0xb8, 0x21, 0x05, 0x1e, 0x02, 0x3c, 0x6c, 0x1c, 0x53, 0x95, 0x2d, 0xe9,
	0x7b, 0xba, 0x55, 0x27, 0x49, 0xb6, 0xa4, 0xae, 0x5b, 0xaf, 0xeb, 0x86, 0x17, 0x60, 0x89, 0x46,
	0xcd, 0xe9, 0xbb, 0x3d, 0x7f, 0x77, 0x74, 0xf4, 0xef, 0x0e, 0xf8, 0x0f, 0x83, 0x67, 0x60, 0xe6,
	0x0b, 0x59, 0x08, 0x4d, 0xca, 0xd9, 0xae, 0xf9, 0xe1, 0x2f, 0x7c, 0xe3, 0xce, 0xdb, 0xe2, 0xfb,
	0x9d, 0xfa, 0x4a, 0xa7, 0x9f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x9a, 0x64, 0x6d, 0xac, 0xbb, 0x01,
	0x00, 0x00,
}
