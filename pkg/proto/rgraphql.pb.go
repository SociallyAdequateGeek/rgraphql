// Code generated by protoc-gen-go.
// source: src/rgraphql.proto
// DO NOT EDIT!

/*
Package rgraphql is a generated protocol buffer package.

It is generated from these files:
	src/rgraphql.proto

It has these top-level messages:
	RGQLQueryFieldDirective
	RGQLQueryTreeNode
	FieldArgument
	ASTVariable
	RGQLPrimitive
	RGQLClientMessage
	RGQLQueryInit
	RGQLQueryTreeMutation
	RGQLQueryFinish
	RGQLServerMessage
	RGQLValueInit
	RGQLValueFinalize
	RGQLQueryError
	RGQLValue
	RGQLValueBatch
*/
package rgraphql

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type RGQLPrimitive_Kind int32

const (
	RGQLPrimitive_PRIMITIVE_KIND_NULL   RGQLPrimitive_Kind = 0
	RGQLPrimitive_PRIMITIVE_KIND_INT    RGQLPrimitive_Kind = 1
	RGQLPrimitive_PRIMITIVE_KIND_FLOAT  RGQLPrimitive_Kind = 2
	RGQLPrimitive_PRIMITIVE_KIND_STRING RGQLPrimitive_Kind = 3
	RGQLPrimitive_PRIMITIVE_KIND_BOOL   RGQLPrimitive_Kind = 4
	RGQLPrimitive_PRIMITIVE_KIND_BINARY RGQLPrimitive_Kind = 5
	RGQLPrimitive_PRIMITIVE_KIND_OBJECT RGQLPrimitive_Kind = 6
	// A marker for an empty array.
	RGQLPrimitive_PRIMITIVE_KIND_ARRAY RGQLPrimitive_Kind = 7
)

var RGQLPrimitive_Kind_name = map[int32]string{
	0: "PRIMITIVE_KIND_NULL",
	1: "PRIMITIVE_KIND_INT",
	2: "PRIMITIVE_KIND_FLOAT",
	3: "PRIMITIVE_KIND_STRING",
	4: "PRIMITIVE_KIND_BOOL",
	5: "PRIMITIVE_KIND_BINARY",
	6: "PRIMITIVE_KIND_OBJECT",
	7: "PRIMITIVE_KIND_ARRAY",
}
var RGQLPrimitive_Kind_value = map[string]int32{
	"PRIMITIVE_KIND_NULL":   0,
	"PRIMITIVE_KIND_INT":    1,
	"PRIMITIVE_KIND_FLOAT":  2,
	"PRIMITIVE_KIND_STRING": 3,
	"PRIMITIVE_KIND_BOOL":   4,
	"PRIMITIVE_KIND_BINARY": 5,
	"PRIMITIVE_KIND_OBJECT": 6,
	"PRIMITIVE_KIND_ARRAY":  7,
}

func (x RGQLPrimitive_Kind) String() string {
	return proto.EnumName(RGQLPrimitive_Kind_name, int32(x))
}
func (RGQLPrimitive_Kind) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{4, 0} }

type RGQLQueryTreeMutation_SubtreeOperation int32

const (
	// Add a child tree to the subtree.
	RGQLQueryTreeMutation_SUBTREE_ADD_CHILD RGQLQueryTreeMutation_SubtreeOperation = 0
	// Delete a tree node and all children.
	RGQLQueryTreeMutation_SUBTREE_DELETE RGQLQueryTreeMutation_SubtreeOperation = 1
)

var RGQLQueryTreeMutation_SubtreeOperation_name = map[int32]string{
	0: "SUBTREE_ADD_CHILD",
	1: "SUBTREE_DELETE",
}
var RGQLQueryTreeMutation_SubtreeOperation_value = map[string]int32{
	"SUBTREE_ADD_CHILD": 0,
	"SUBTREE_DELETE":    1,
}

func (x RGQLQueryTreeMutation_SubtreeOperation) String() string {
	return proto.EnumName(RGQLQueryTreeMutation_SubtreeOperation_name, int32(x))
}
func (RGQLQueryTreeMutation_SubtreeOperation) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{7, 0}
}

type RGQLValueInit_CacheStrategy int32

const (
	RGQLValueInit_CACHE_LRU RGQLValueInit_CacheStrategy = 0
)

var RGQLValueInit_CacheStrategy_name = map[int32]string{
	0: "CACHE_LRU",
}
var RGQLValueInit_CacheStrategy_value = map[string]int32{
	"CACHE_LRU": 0,
}

func (x RGQLValueInit_CacheStrategy) String() string {
	return proto.EnumName(RGQLValueInit_CacheStrategy_name, int32(x))
}
func (RGQLValueInit_CacheStrategy) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{10, 0}
}

type RGQLQueryFieldDirective struct {
	// Directive name
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// Optional arguments.
	Args []*FieldArgument `protobuf:"bytes,2,rep,name=args" json:"args,omitempty"`
}

func (m *RGQLQueryFieldDirective) Reset()                    { *m = RGQLQueryFieldDirective{} }
func (m *RGQLQueryFieldDirective) String() string            { return proto.CompactTextString(m) }
func (*RGQLQueryFieldDirective) ProtoMessage()               {}
func (*RGQLQueryFieldDirective) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *RGQLQueryFieldDirective) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *RGQLQueryFieldDirective) GetArgs() []*FieldArgument {
	if m != nil {
		return m.Args
	}
	return nil
}

type RGQLQueryTreeNode struct {
	// Integer ID of the node.
	Id uint32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// Name of the field this node represents.
	FieldName string `protobuf:"bytes,2,opt,name=field_name,json=fieldName" json:"field_name,omitempty"`
	// Arguments.
	Args []*FieldArgument `protobuf:"bytes,3,rep,name=args" json:"args,omitempty"`
	// Directives
	Directive []*RGQLQueryFieldDirective `protobuf:"bytes,4,rep,name=directive" json:"directive,omitempty"`
	// Children
	Children []*RGQLQueryTreeNode `protobuf:"bytes,5,rep,name=children" json:"children,omitempty"`
}

func (m *RGQLQueryTreeNode) Reset()                    { *m = RGQLQueryTreeNode{} }
func (m *RGQLQueryTreeNode) String() string            { return proto.CompactTextString(m) }
func (*RGQLQueryTreeNode) ProtoMessage()               {}
func (*RGQLQueryTreeNode) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *RGQLQueryTreeNode) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *RGQLQueryTreeNode) GetFieldName() string {
	if m != nil {
		return m.FieldName
	}
	return ""
}

func (m *RGQLQueryTreeNode) GetArgs() []*FieldArgument {
	if m != nil {
		return m.Args
	}
	return nil
}

func (m *RGQLQueryTreeNode) GetDirective() []*RGQLQueryFieldDirective {
	if m != nil {
		return m.Directive
	}
	return nil
}

func (m *RGQLQueryTreeNode) GetChildren() []*RGQLQueryTreeNode {
	if m != nil {
		return m.Children
	}
	return nil
}

type FieldArgument struct {
	Name       string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	VariableId uint32 `protobuf:"varint,2,opt,name=variable_id,json=variableId" json:"variable_id,omitempty"`
}

func (m *FieldArgument) Reset()                    { *m = FieldArgument{} }
func (m *FieldArgument) String() string            { return proto.CompactTextString(m) }
func (*FieldArgument) ProtoMessage()               {}
func (*FieldArgument) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *FieldArgument) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *FieldArgument) GetVariableId() uint32 {
	if m != nil {
		return m.VariableId
	}
	return 0
}

type ASTVariable struct {
	Id    uint32         `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Value *RGQLPrimitive `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (m *ASTVariable) Reset()                    { *m = ASTVariable{} }
func (m *ASTVariable) String() string            { return proto.CompactTextString(m) }
func (*ASTVariable) ProtoMessage()               {}
func (*ASTVariable) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *ASTVariable) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *ASTVariable) GetValue() *RGQLPrimitive {
	if m != nil {
		return m.Value
	}
	return nil
}

type RGQLPrimitive struct {
	Kind        RGQLPrimitive_Kind `protobuf:"varint,1,opt,name=kind,enum=rgraphql.RGQLPrimitive_Kind" json:"kind,omitempty"`
	IntValue    int32              `protobuf:"varint,2,opt,name=int_value,json=intValue" json:"int_value,omitempty"`
	FloatValue  float64            `protobuf:"fixed64,3,opt,name=float_value,json=floatValue" json:"float_value,omitempty"`
	StringValue string             `protobuf:"bytes,4,opt,name=string_value,json=stringValue" json:"string_value,omitempty"`
	BinaryValue []byte             `protobuf:"bytes,5,opt,name=binary_value,json=binaryValue,proto3" json:"binary_value,omitempty"`
	BoolValue   bool               `protobuf:"varint,6,opt,name=bool_value,json=boolValue" json:"bool_value,omitempty"`
}

func (m *RGQLPrimitive) Reset()                    { *m = RGQLPrimitive{} }
func (m *RGQLPrimitive) String() string            { return proto.CompactTextString(m) }
func (*RGQLPrimitive) ProtoMessage()               {}
func (*RGQLPrimitive) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *RGQLPrimitive) GetKind() RGQLPrimitive_Kind {
	if m != nil {
		return m.Kind
	}
	return RGQLPrimitive_PRIMITIVE_KIND_NULL
}

func (m *RGQLPrimitive) GetIntValue() int32 {
	if m != nil {
		return m.IntValue
	}
	return 0
}

func (m *RGQLPrimitive) GetFloatValue() float64 {
	if m != nil {
		return m.FloatValue
	}
	return 0
}

func (m *RGQLPrimitive) GetStringValue() string {
	if m != nil {
		return m.StringValue
	}
	return ""
}

func (m *RGQLPrimitive) GetBinaryValue() []byte {
	if m != nil {
		return m.BinaryValue
	}
	return nil
}

func (m *RGQLPrimitive) GetBoolValue() bool {
	if m != nil {
		return m.BoolValue
	}
	return false
}

// Messages
type RGQLClientMessage struct {
	InitQuery   *RGQLQueryInit         `protobuf:"bytes,1,opt,name=init_query,json=initQuery" json:"init_query,omitempty"`
	MutateTree  *RGQLQueryTreeMutation `protobuf:"bytes,2,opt,name=mutate_tree,json=mutateTree" json:"mutate_tree,omitempty"`
	FinishQuery *RGQLQueryFinish       `protobuf:"bytes,3,opt,name=finish_query,json=finishQuery" json:"finish_query,omitempty"`
}

func (m *RGQLClientMessage) Reset()                    { *m = RGQLClientMessage{} }
func (m *RGQLClientMessage) String() string            { return proto.CompactTextString(m) }
func (*RGQLClientMessage) ProtoMessage()               {}
func (*RGQLClientMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *RGQLClientMessage) GetInitQuery() *RGQLQueryInit {
	if m != nil {
		return m.InitQuery
	}
	return nil
}

func (m *RGQLClientMessage) GetMutateTree() *RGQLQueryTreeMutation {
	if m != nil {
		return m.MutateTree
	}
	return nil
}

func (m *RGQLClientMessage) GetFinishQuery() *RGQLQueryFinish {
	if m != nil {
		return m.FinishQuery
	}
	return nil
}

type RGQLQueryInit struct {
	// The ID of this query.
	QueryId uint32 `protobuf:"varint,1,opt,name=query_id,json=queryId" json:"query_id,omitempty"`
	// Force serial for this query?
	// Note: serial queries execute as soon as the first mutation arrives, and cannot be updated.
	ForceSerial bool `protobuf:"varint,2,opt,name=force_serial,json=forceSerial" json:"force_serial,omitempty"`
	// Operation type, i.e. query, mutation, etc.
	OperationType string `protobuf:"bytes,3,opt,name=operation_type,json=operationType" json:"operation_type,omitempty"`
}

func (m *RGQLQueryInit) Reset()                    { *m = RGQLQueryInit{} }
func (m *RGQLQueryInit) String() string            { return proto.CompactTextString(m) }
func (*RGQLQueryInit) ProtoMessage()               {}
func (*RGQLQueryInit) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *RGQLQueryInit) GetQueryId() uint32 {
	if m != nil {
		return m.QueryId
	}
	return 0
}

func (m *RGQLQueryInit) GetForceSerial() bool {
	if m != nil {
		return m.ForceSerial
	}
	return false
}

func (m *RGQLQueryInit) GetOperationType() string {
	if m != nil {
		return m.OperationType
	}
	return ""
}

type RGQLQueryTreeMutation struct {
	// The ID of this query.
	QueryId uint32 `protobuf:"varint,1,opt,name=query_id,json=queryId" json:"query_id,omitempty"`
	// All node mutations in this step.
	NodeMutation []*RGQLQueryTreeMutation_NodeMutation `protobuf:"bytes,2,rep,name=node_mutation,json=nodeMutation" json:"node_mutation,omitempty"`
	// Any new variables.
	Variables []*ASTVariable `protobuf:"bytes,3,rep,name=variables" json:"variables,omitempty"`
}

func (m *RGQLQueryTreeMutation) Reset()                    { *m = RGQLQueryTreeMutation{} }
func (m *RGQLQueryTreeMutation) String() string            { return proto.CompactTextString(m) }
func (*RGQLQueryTreeMutation) ProtoMessage()               {}
func (*RGQLQueryTreeMutation) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *RGQLQueryTreeMutation) GetQueryId() uint32 {
	if m != nil {
		return m.QueryId
	}
	return 0
}

func (m *RGQLQueryTreeMutation) GetNodeMutation() []*RGQLQueryTreeMutation_NodeMutation {
	if m != nil {
		return m.NodeMutation
	}
	return nil
}

func (m *RGQLQueryTreeMutation) GetVariables() []*ASTVariable {
	if m != nil {
		return m.Variables
	}
	return nil
}

type RGQLQueryTreeMutation_NodeMutation struct {
	// ID of the node we are operating on.
	NodeId uint32 `protobuf:"varint,1,opt,name=node_id,json=nodeId" json:"node_id,omitempty"`
	// Operation we are taking.
	Operation RGQLQueryTreeMutation_SubtreeOperation `protobuf:"varint,2,opt,name=operation,enum=rgraphql.RGQLQueryTreeMutation_SubtreeOperation" json:"operation,omitempty"`
	// The new node tree to add, if we are adding a child.
	Node *RGQLQueryTreeNode `protobuf:"bytes,3,opt,name=node" json:"node,omitempty"`
}

func (m *RGQLQueryTreeMutation_NodeMutation) Reset()         { *m = RGQLQueryTreeMutation_NodeMutation{} }
func (m *RGQLQueryTreeMutation_NodeMutation) String() string { return proto.CompactTextString(m) }
func (*RGQLQueryTreeMutation_NodeMutation) ProtoMessage()    {}
func (*RGQLQueryTreeMutation_NodeMutation) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{7, 0}
}

func (m *RGQLQueryTreeMutation_NodeMutation) GetNodeId() uint32 {
	if m != nil {
		return m.NodeId
	}
	return 0
}

func (m *RGQLQueryTreeMutation_NodeMutation) GetOperation() RGQLQueryTreeMutation_SubtreeOperation {
	if m != nil {
		return m.Operation
	}
	return RGQLQueryTreeMutation_SUBTREE_ADD_CHILD
}

func (m *RGQLQueryTreeMutation_NodeMutation) GetNode() *RGQLQueryTreeNode {
	if m != nil {
		return m.Node
	}
	return nil
}

type RGQLQueryFinish struct {
	// The ID of this query.
	QueryId uint32 `protobuf:"varint,1,opt,name=query_id,json=queryId" json:"query_id,omitempty"`
}

func (m *RGQLQueryFinish) Reset()                    { *m = RGQLQueryFinish{} }
func (m *RGQLQueryFinish) String() string            { return proto.CompactTextString(m) }
func (*RGQLQueryFinish) ProtoMessage()               {}
func (*RGQLQueryFinish) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *RGQLQueryFinish) GetQueryId() uint32 {
	if m != nil {
		return m.QueryId
	}
	return 0
}

type RGQLServerMessage struct {
	QueryError    *RGQLQueryError    `protobuf:"bytes,2,opt,name=query_error,json=queryError" json:"query_error,omitempty"`
	ValueInit     *RGQLValueInit     `protobuf:"bytes,4,opt,name=value_init,json=valueInit" json:"value_init,omitempty"`
	ValueBatch    *RGQLValueBatch    `protobuf:"bytes,5,opt,name=value_batch,json=valueBatch" json:"value_batch,omitempty"`
	ValueFinalize *RGQLValueFinalize `protobuf:"bytes,6,opt,name=value_finalize,json=valueFinalize" json:"value_finalize,omitempty"`
}

func (m *RGQLServerMessage) Reset()                    { *m = RGQLServerMessage{} }
func (m *RGQLServerMessage) String() string            { return proto.CompactTextString(m) }
func (*RGQLServerMessage) ProtoMessage()               {}
func (*RGQLServerMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *RGQLServerMessage) GetQueryError() *RGQLQueryError {
	if m != nil {
		return m.QueryError
	}
	return nil
}

func (m *RGQLServerMessage) GetValueInit() *RGQLValueInit {
	if m != nil {
		return m.ValueInit
	}
	return nil
}

func (m *RGQLServerMessage) GetValueBatch() *RGQLValueBatch {
	if m != nil {
		return m.ValueBatch
	}
	return nil
}

func (m *RGQLServerMessage) GetValueFinalize() *RGQLValueFinalize {
	if m != nil {
		return m.ValueFinalize
	}
	return nil
}

// RGQLValueInit initializes a result value tree.
type RGQLValueInit struct {
	// result_id is the identifier for the result tree.
	ResultId uint32 `protobuf:"varint,1,opt,name=result_id,json=resultId" json:"result_id,omitempty"`
	// query_id is the identifier for the corresponding query.
	QueryId uint32 `protobuf:"varint,2,opt,name=query_id,json=queryId" json:"query_id,omitempty"`
	// cache_strategy is the strategy used for the path cache.
	CacheStrategy RGQLValueInit_CacheStrategy `protobuf:"varint,3,opt,name=cache_strategy,json=cacheStrategy,enum=rgraphql.RGQLValueInit_CacheStrategy" json:"cache_strategy,omitempty"`
	// cache_size is the size of the path cache, if necessary.
	CacheSize uint32 `protobuf:"varint,4,opt,name=cache_size,json=cacheSize" json:"cache_size,omitempty"`
}

func (m *RGQLValueInit) Reset()                    { *m = RGQLValueInit{} }
func (m *RGQLValueInit) String() string            { return proto.CompactTextString(m) }
func (*RGQLValueInit) ProtoMessage()               {}
func (*RGQLValueInit) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *RGQLValueInit) GetResultId() uint32 {
	if m != nil {
		return m.ResultId
	}
	return 0
}

func (m *RGQLValueInit) GetQueryId() uint32 {
	if m != nil {
		return m.QueryId
	}
	return 0
}

func (m *RGQLValueInit) GetCacheStrategy() RGQLValueInit_CacheStrategy {
	if m != nil {
		return m.CacheStrategy
	}
	return RGQLValueInit_CACHE_LRU
}

func (m *RGQLValueInit) GetCacheSize() uint32 {
	if m != nil {
		return m.CacheSize
	}
	return 0
}

// RGQLValueFinalize finalizes a result tree.
type RGQLValueFinalize struct {
	ResultId uint32 `protobuf:"varint,1,opt,name=result_id,json=resultId" json:"result_id,omitempty"`
}

func (m *RGQLValueFinalize) Reset()                    { *m = RGQLValueFinalize{} }
func (m *RGQLValueFinalize) String() string            { return proto.CompactTextString(m) }
func (*RGQLValueFinalize) ProtoMessage()               {}
func (*RGQLValueFinalize) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *RGQLValueFinalize) GetResultId() uint32 {
	if m != nil {
		return m.ResultId
	}
	return 0
}

// Communicating a failure in the input query.
type RGQLQueryError struct {
	QueryId     uint32 `protobuf:"varint,1,opt,name=query_id,json=queryId" json:"query_id,omitempty"`
	QueryNodeId uint32 `protobuf:"varint,2,opt,name=query_node_id,json=queryNodeId" json:"query_node_id,omitempty"`
	Error       string `protobuf:"bytes,3,opt,name=error" json:"error,omitempty"`
}

func (m *RGQLQueryError) Reset()                    { *m = RGQLQueryError{} }
func (m *RGQLQueryError) String() string            { return proto.CompactTextString(m) }
func (*RGQLQueryError) ProtoMessage()               {}
func (*RGQLQueryError) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *RGQLQueryError) GetQueryId() uint32 {
	if m != nil {
		return m.QueryId
	}
	return 0
}

func (m *RGQLQueryError) GetQueryNodeId() uint32 {
	if m != nil {
		return m.QueryNodeId
	}
	return 0
}

func (m *RGQLQueryError) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

type RGQLValue struct {
	// The ID of the field in the query tree, if a field.
	QueryNodeId uint32 `protobuf:"varint,1,opt,name=query_node_id,json=queryNodeId" json:"query_node_id,omitempty"`
	// The 1-based index, if an array element.
	ArrayIndex uint32 `protobuf:"varint,2,opt,name=array_index,json=arrayIndex" json:"array_index,omitempty"`
	// If this is a 0-th index value, this is a pointer to a previous identifier.
	// Otherwise, this is an identifier for adding an alias to this path.
	PosIdentifier uint32 `protobuf:"varint,3,opt,name=pos_identifier,json=posIdentifier" json:"pos_identifier,omitempty"`
	// The value, if we have one.
	Value *RGQLPrimitive `protobuf:"bytes,4,opt,name=value" json:"value,omitempty"`
	// The error, if we are erroring this field.
	Error string `protobuf:"bytes,5,opt,name=error" json:"error,omitempty"`
}

func (m *RGQLValue) Reset()                    { *m = RGQLValue{} }
func (m *RGQLValue) String() string            { return proto.CompactTextString(m) }
func (*RGQLValue) ProtoMessage()               {}
func (*RGQLValue) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *RGQLValue) GetQueryNodeId() uint32 {
	if m != nil {
		return m.QueryNodeId
	}
	return 0
}

func (m *RGQLValue) GetArrayIndex() uint32 {
	if m != nil {
		return m.ArrayIndex
	}
	return 0
}

func (m *RGQLValue) GetPosIdentifier() uint32 {
	if m != nil {
		return m.PosIdentifier
	}
	return 0
}

func (m *RGQLValue) GetValue() *RGQLPrimitive {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *RGQLValue) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

type RGQLValueBatch struct {
	// The ID of the result tree this batch is for.
	ResultId uint32 `protobuf:"varint,1,opt,name=result_id,json=resultId" json:"result_id,omitempty"`
	// The batch of RGQLValue values, encoded.
	Values [][]byte `protobuf:"bytes,2,rep,name=values,proto3" json:"values,omitempty"`
}

func (m *RGQLValueBatch) Reset()                    { *m = RGQLValueBatch{} }
func (m *RGQLValueBatch) String() string            { return proto.CompactTextString(m) }
func (*RGQLValueBatch) ProtoMessage()               {}
func (*RGQLValueBatch) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *RGQLValueBatch) GetResultId() uint32 {
	if m != nil {
		return m.ResultId
	}
	return 0
}

func (m *RGQLValueBatch) GetValues() [][]byte {
	if m != nil {
		return m.Values
	}
	return nil
}

func init() {
	proto.RegisterType((*RGQLQueryFieldDirective)(nil), "rgraphql.RGQLQueryFieldDirective")
	proto.RegisterType((*RGQLQueryTreeNode)(nil), "rgraphql.RGQLQueryTreeNode")
	proto.RegisterType((*FieldArgument)(nil), "rgraphql.FieldArgument")
	proto.RegisterType((*ASTVariable)(nil), "rgraphql.ASTVariable")
	proto.RegisterType((*RGQLPrimitive)(nil), "rgraphql.RGQLPrimitive")
	proto.RegisterType((*RGQLClientMessage)(nil), "rgraphql.RGQLClientMessage")
	proto.RegisterType((*RGQLQueryInit)(nil), "rgraphql.RGQLQueryInit")
	proto.RegisterType((*RGQLQueryTreeMutation)(nil), "rgraphql.RGQLQueryTreeMutation")
	proto.RegisterType((*RGQLQueryTreeMutation_NodeMutation)(nil), "rgraphql.RGQLQueryTreeMutation.NodeMutation")
	proto.RegisterType((*RGQLQueryFinish)(nil), "rgraphql.RGQLQueryFinish")
	proto.RegisterType((*RGQLServerMessage)(nil), "rgraphql.RGQLServerMessage")
	proto.RegisterType((*RGQLValueInit)(nil), "rgraphql.RGQLValueInit")
	proto.RegisterType((*RGQLValueFinalize)(nil), "rgraphql.RGQLValueFinalize")
	proto.RegisterType((*RGQLQueryError)(nil), "rgraphql.RGQLQueryError")
	proto.RegisterType((*RGQLValue)(nil), "rgraphql.RGQLValue")
	proto.RegisterType((*RGQLValueBatch)(nil), "rgraphql.RGQLValueBatch")
	proto.RegisterEnum("rgraphql.RGQLPrimitive_Kind", RGQLPrimitive_Kind_name, RGQLPrimitive_Kind_value)
	proto.RegisterEnum("rgraphql.RGQLQueryTreeMutation_SubtreeOperation", RGQLQueryTreeMutation_SubtreeOperation_name, RGQLQueryTreeMutation_SubtreeOperation_value)
	proto.RegisterEnum("rgraphql.RGQLValueInit_CacheStrategy", RGQLValueInit_CacheStrategy_name, RGQLValueInit_CacheStrategy_value)
}

func init() { proto.RegisterFile("src/rgraphql.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1093 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x8c, 0x56, 0xdb, 0x6e, 0xdb, 0x46,
	0x10, 0x35, 0x75, 0xb1, 0xc5, 0x91, 0xa8, 0x32, 0xdb, 0x38, 0x96, 0x9b, 0xa6, 0x76, 0x08, 0x04,
	0x30, 0xd0, 0xd4, 0x31, 0x1c, 0xa0, 0x45, 0x81, 0x16, 0xad, 0x6e, 0x4e, 0xd8, 0xd0, 0x72, 0xbc,
	0xa2, 0x0d, 0xa4, 0x2f, 0x04, 0x25, 0xae, 0xe4, 0x45, 0x69, 0x52, 0x5e, 0x52, 0x42, 0xdd, 0xf7,
	0xfe, 0x49, 0x1f, 0xfa, 0x11, 0xf9, 0x83, 0xbe, 0xb6, 0x1f, 0xd1, 0xbf, 0x08, 0x76, 0x97, 0x17,
	0xc9, 0x92, 0x95, 0xbc, 0x71, 0xce, 0x9c, 0xb9, 0xee, 0xcc, 0x48, 0x80, 0x22, 0x36, 0x7c, 0xc1,
	0xc6, 0xcc, 0x9d, 0x5c, 0xdd, 0xf8, 0x87, 0x13, 0x16, 0xc6, 0x21, 0xaa, 0xa4, 0xb2, 0xf1, 0x2b,
	0xec, 0xe0, 0x57, 0xe7, 0xd6, 0xf9, 0x94, 0xb0, 0xdb, 0x13, 0x4a, 0x7c, 0xaf, 0x43, 0x19, 0x19,
	0xc6, 0x74, 0x46, 0x10, 0x82, 0x52, 0xe0, 0x5e, 0x93, 0x86, 0xb2, 0xaf, 0x1c, 0xa8, 0x58, 0x7c,
	0xa3, 0xaf, 0xa1, 0xe4, 0xb2, 0x71, 0xd4, 0x28, 0xec, 0x17, 0x0f, 0xaa, 0xc7, 0x3b, 0x87, 0x99,
	0x5f, 0x61, 0xdb, 0x64, 0xe3, 0xe9, 0x35, 0x09, 0x62, 0x2c, 0x48, 0xc6, 0xff, 0x0a, 0x3c, 0xc8,
	0x9c, 0xdb, 0x8c, 0x90, 0x5e, 0xe8, 0x11, 0x54, 0x87, 0x02, 0xf5, 0x84, 0x53, 0x0d, 0x17, 0xa8,
	0x87, 0x9e, 0x00, 0x8c, 0xb8, 0xb1, 0x23, 0x82, 0x15, 0x44, 0x30, 0x55, 0x20, 0xbd, 0xf9, 0x88,
	0xc5, 0x4f, 0x88, 0x88, 0x7e, 0x02, 0xd5, 0x4b, 0xf3, 0x6f, 0x94, 0x84, 0xc5, 0xd3, 0xdc, 0xe2,
	0x9e, 0x42, 0x71, 0x6e, 0x83, 0xbe, 0x83, 0xca, 0xf0, 0x8a, 0xfa, 0x1e, 0x23, 0x41, 0xa3, 0x2c,
	0xec, 0x1f, 0xaf, 0xb0, 0x4f, 0x6b, 0xc1, 0x19, 0xd9, 0xe8, 0x80, 0xb6, 0x90, 0xd0, 0xca, 0xee,
	0xed, 0x41, 0x75, 0xe6, 0x32, 0xea, 0x0e, 0x7c, 0xe2, 0x50, 0x4f, 0xd4, 0xaa, 0x61, 0x48, 0x21,
	0xd3, 0x33, 0x2c, 0xa8, 0x36, 0xfb, 0xf6, 0x65, 0x02, 0x2c, 0xb5, 0xea, 0x1b, 0x28, 0xcf, 0x5c,
	0x7f, 0x2a, 0xbb, 0xb4, 0xd0, 0x0c, 0x9e, 0xda, 0x5b, 0x46, 0xaf, 0xa9, 0x28, 0x48, 0xb2, 0x8c,
	0xf7, 0x45, 0xd0, 0x16, 0x14, 0xe8, 0x08, 0x4a, 0xbf, 0xd1, 0x40, 0xba, 0xac, 0x1f, 0x7f, 0x79,
	0x8f, 0xfd, 0xe1, 0x1b, 0x1a, 0x78, 0x58, 0x30, 0xd1, 0x63, 0x50, 0x69, 0x10, 0x3b, 0x79, 0xd8,
	0x32, 0xae, 0xd0, 0x20, 0xbe, 0xe4, 0x32, 0xaf, 0x67, 0xe4, 0x87, 0x6e, 0xaa, 0x2e, 0xee, 0x2b,
	0x07, 0x0a, 0x06, 0x01, 0x49, 0xc2, 0x53, 0xa8, 0x45, 0x31, 0xa3, 0xc1, 0x38, 0x61, 0x94, 0x44,
	0x33, 0xaa, 0x12, 0xcb, 0x28, 0x03, 0x1a, 0xb8, 0xec, 0x36, 0xa1, 0x94, 0xf7, 0x95, 0x83, 0x1a,
	0xae, 0x4a, 0x4c, 0x52, 0x9e, 0x00, 0x0c, 0xc2, 0xd0, 0x4f, 0x08, 0x9b, 0xfb, 0xca, 0x41, 0x05,
	0xab, 0x1c, 0x11, 0x6a, 0xe3, 0x3f, 0x05, 0x4a, 0x3c, 0x63, 0xb4, 0x03, 0x9f, 0xbf, 0xc5, 0xe6,
	0xa9, 0x69, 0x9b, 0x97, 0x5d, 0xe7, 0x8d, 0xd9, 0xeb, 0x38, 0xbd, 0x0b, 0xcb, 0xd2, 0x37, 0xd0,
	0x23, 0x40, 0x77, 0x14, 0x66, 0xcf, 0xd6, 0x15, 0xd4, 0x80, 0x87, 0x77, 0xf0, 0x13, 0xeb, 0xac,
	0x69, 0xeb, 0x05, 0xb4, 0x0b, 0xdb, 0x77, 0x34, 0x7d, 0x1b, 0x9b, 0xbd, 0x57, 0x7a, 0x71, 0x45,
	0x94, 0xd6, 0xd9, 0x99, 0xa5, 0x97, 0x56, 0xd8, 0xb4, 0xcc, 0x5e, 0x13, 0xbf, 0xd3, 0xcb, 0x2b,
	0x54, 0x67, 0xad, 0x5f, 0xba, 0x6d, 0x5b, 0xdf, 0x5c, 0x91, 0x43, 0x13, 0xe3, 0xe6, 0x3b, 0x7d,
	0xcb, 0xf8, 0x27, 0x59, 0x9f, 0xb6, 0x4f, 0x49, 0x10, 0x9f, 0x92, 0x28, 0x72, 0xc7, 0x04, 0x7d,
	0x0b, 0x40, 0x03, 0x1a, 0x3b, 0x37, 0x7c, 0x10, 0xc5, 0x43, 0x2e, 0x0d, 0x82, 0x98, 0x51, 0x33,
	0xa0, 0x31, 0x56, 0x39, 0x55, 0x88, 0xe8, 0x67, 0xa8, 0x5e, 0x4f, 0x63, 0x37, 0x26, 0x4e, 0xcc,
	0x48, 0x3a, 0x41, 0x7b, 0xf7, 0x0c, 0xf7, 0x29, 0x67, 0xd2, 0x30, 0xc0, 0x20, 0x6d, 0x38, 0x86,
	0x7e, 0x80, 0xda, 0x88, 0x06, 0x34, 0xba, 0x4a, 0x62, 0x17, 0x85, 0x8b, 0xdd, 0x95, 0xfb, 0xc5,
	0x69, 0xb8, 0x2a, 0xe9, 0x02, 0x32, 0x62, 0x39, 0x8b, 0x59, 0x6e, 0x68, 0x17, 0x2a, 0xc2, 0x8f,
	0x93, 0x8d, 0xf8, 0x96, 0x90, 0x4d, 0x8f, 0xcf, 0xc4, 0x28, 0x64, 0x43, 0xe2, 0x44, 0x84, 0x51,
	0xd7, 0x17, 0xc9, 0x56, 0x70, 0x55, 0x60, 0x7d, 0x01, 0xa1, 0x67, 0x50, 0x0f, 0x27, 0x84, 0x89,
	0x2c, 0x9d, 0xf8, 0x76, 0x22, 0xa7, 0x4f, 0xc5, 0x5a, 0x86, 0xda, 0xb7, 0x13, 0x62, 0xfc, 0x55,
	0x84, 0xed, 0x95, 0x95, 0xad, 0x0b, 0x7f, 0x0e, 0x5a, 0x10, 0x7a, 0xc4, 0xb9, 0x4e, 0xb8, 0xc9,
	0xb5, 0x7b, 0xfe, 0x91, 0x66, 0x1d, 0xf2, 0x93, 0x90, 0x75, 0xae, 0x16, 0xcc, 0x49, 0xe8, 0x25,
	0xa8, 0xe9, 0x9a, 0xa7, 0xa7, 0x6c, 0x3b, 0x77, 0x37, 0xb7, 0xf3, 0x38, 0xe7, 0x7d, 0xf1, 0xb7,
	0x02, 0xb5, 0x79, 0x9f, 0x68, 0x07, 0xb6, 0x44, 0x62, 0x59, 0xca, 0x9b, 0x5c, 0x34, 0x3d, 0xd4,
	0x03, 0x35, 0xab, 0x5b, 0x74, 0xab, 0x7e, 0x7c, 0xf4, 0xb1, 0x6c, 0xfb, 0xd3, 0x01, 0x9f, 0x84,
	0xb3, 0xd4, 0x0e, 0xe7, 0x2e, 0xd0, 0x0b, 0x28, 0x71, 0xcf, 0xc9, 0x13, 0xaf, 0x3d, 0x81, 0x82,
	0x68, 0xfc, 0x08, 0xfa, 0x5d, 0x7f, 0x68, 0x1b, 0x1e, 0xf4, 0x2f, 0x5a, 0x36, 0xee, 0x76, 0x9d,
	0x66, 0xa7, 0xe3, 0xb4, 0x5f, 0x9b, 0x56, 0x47, 0xdf, 0x40, 0x08, 0xea, 0x29, 0xdc, 0xe9, 0x5a,
	0x5d, 0xbb, 0xab, 0x2b, 0xc6, 0x73, 0xf8, 0xec, 0xce, 0xf0, 0xac, 0x79, 0x1f, 0xe3, 0xcf, 0x82,
	0x5c, 0x8c, 0x3e, 0x61, 0x33, 0xc2, 0xd2, 0xc5, 0xf8, 0x1e, 0xaa, 0xd2, 0x80, 0x30, 0x16, 0xb2,
	0x64, 0xc0, 0x1b, 0x2b, 0x52, 0xef, 0x72, 0x3d, 0x86, 0x9b, 0xec, 0x9b, 0xef, 0x94, 0xb8, 0x2d,
	0x0e, 0x5f, 0x17, 0x71, 0xa4, 0x96, 0x76, 0x4a, 0x9c, 0x1a, 0xb9, 0x53, 0xb3, 0xf4, 0x93, 0x87,
	0x94, 0x76, 0x03, 0x37, 0x1e, 0x5e, 0x89, 0xd3, 0xb5, 0x14, 0x52, 0x18, 0xb6, 0xb8, 0x1e, 0xcb,
	0x20, 0xe2, 0x1b, 0xb5, 0xa0, 0x2e, 0x4d, 0x47, 0x34, 0x70, 0x7d, 0xfa, 0x87, 0xbc, 0x6b, 0x4b,
	0xbd, 0x16, 0xd6, 0x27, 0x09, 0x05, 0x6b, 0xb3, 0x79, 0xd1, 0xf8, 0x57, 0x91, 0x3b, 0x95, 0xe5,
	0xc6, 0xaf, 0x35, 0x23, 0xd1, 0xd4, 0x8f, 0xf3, 0xae, 0x55, 0x24, 0x60, 0x7a, 0x0b, 0x1d, 0x2d,
	0x2c, 0x4e, 0xbc, 0x05, 0xf5, 0xa1, 0x3b, 0xbc, 0x22, 0x4e, 0x14, 0x33, 0x37, 0x26, 0x63, 0xb9,
	0xdc, 0xf5, 0xe3, 0x67, 0xf7, 0x34, 0xe1, 0xb0, 0xcd, 0xd9, 0xfd, 0x84, 0x8c, 0xb5, 0xe1, 0xbc,
	0xc8, 0xef, 0x75, 0xe2, 0x8d, 0xd7, 0x55, 0x12, 0xa1, 0x54, 0x49, 0xe1, 0x69, 0x7f, 0x05, 0xda,
	0x82, 0x39, 0xd2, 0x40, 0x6d, 0x37, 0xdb, 0xaf, 0xbb, 0x8e, 0x85, 0x2f, 0xf4, 0x0d, 0xe3, 0x48,
	0xbe, 0xee, 0x42, 0xe9, 0x6b, 0x2b, 0x33, 0x08, 0xd4, 0x17, 0x5f, 0x77, 0xdd, 0x76, 0x1b, 0xa0,
	0x49, 0x55, 0xba, 0x4a, 0xb2, 0x17, 0x72, 0x78, 0x7a, 0x72, 0x9f, 0x1e, 0x42, 0x59, 0x4e, 0x91,
	0x3c, 0x2a, 0x52, 0x30, 0xde, 0x2b, 0xa0, 0x66, 0x99, 0x2d, 0xfb, 0x51, 0x96, 0xfd, 0xec, 0x41,
	0xd5, 0x65, 0xcc, 0xbd, 0x75, 0x68, 0xe0, 0x91, 0xdf, 0xd3, 0x1f, 0x7c, 0x01, 0x99, 0x1c, 0xe1,
	0x67, 0x6c, 0x12, 0x46, 0x0e, 0xf5, 0x48, 0x10, 0xd3, 0x11, 0x25, 0x32, 0xa2, 0x86, 0xb5, 0x49,
	0x18, 0x99, 0x19, 0x98, 0xff, 0xf0, 0x97, 0x3e, 0xe5, 0x87, 0x3f, 0x4f, 0xbf, 0x3c, 0x9f, 0x7e,
	0x57, 0x76, 0x29, 0x1f, 0xc8, 0xf5, 0xe3, 0xf2, 0x08, 0x36, 0x85, 0x37, 0xf9, 0x67, 0xaf, 0x86,
	0x13, 0x69, 0xb0, 0x29, 0xfe, 0x42, 0xbe, 0xfc, 0x10, 0x00, 0x00, 0xff, 0xff, 0x0f, 0xa3, 0xbb,
	0x2d, 0x58, 0x0a, 0x00, 0x00,
}
