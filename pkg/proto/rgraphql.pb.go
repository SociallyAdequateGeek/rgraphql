// Code generated by protoc-gen-go.
// source: src/rgraphql.proto
// DO NOT EDIT!

/*
Package rgraphql is a generated protocol buffer package.

It is generated from these files:
	src/rgraphql.proto

It has these top-level messages:
	RGQLQueryFieldDirective
	RGQLQueryTreeNode
	FieldArgument
	ASTValue
	RGQLClientMessage
	RGQLTreeMutation
	RGQLFieldMutation
	RGQLServerMessage
	RGQLValueMutation
*/
package rgraphql

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ASTValue_ASTValueKind int32

const (
	ASTValue_AST_VALUE_NULL   ASTValue_ASTValueKind = 0
	ASTValue_AST_VALUE_STRING ASTValue_ASTValueKind = 1
	ASTValue_AST_VALUE_ENUM   ASTValue_ASTValueKind = 2
	ASTValue_AST_VALUE_INT    ASTValue_ASTValueKind = 3
	ASTValue_AST_VALUE_FLOAT  ASTValue_ASTValueKind = 4
	ASTValue_AST_VALUE_BOOL   ASTValue_ASTValueKind = 5
	ASTValue_AST_VALUE_LIST   ASTValue_ASTValueKind = 6
	ASTValue_AST_VALUE_OBJECT ASTValue_ASTValueKind = 7
)

var ASTValue_ASTValueKind_name = map[int32]string{
	0: "AST_VALUE_NULL",
	1: "AST_VALUE_STRING",
	2: "AST_VALUE_ENUM",
	3: "AST_VALUE_INT",
	4: "AST_VALUE_FLOAT",
	5: "AST_VALUE_BOOL",
	6: "AST_VALUE_LIST",
	7: "AST_VALUE_OBJECT",
}
var ASTValue_ASTValueKind_value = map[string]int32{
	"AST_VALUE_NULL":   0,
	"AST_VALUE_STRING": 1,
	"AST_VALUE_ENUM":   2,
	"AST_VALUE_INT":    3,
	"AST_VALUE_FLOAT":  4,
	"AST_VALUE_BOOL":   5,
	"AST_VALUE_LIST":   6,
	"AST_VALUE_OBJECT": 7,
}

func (x ASTValue_ASTValueKind) String() string {
	return proto.EnumName(ASTValue_ASTValueKind_name, int32(x))
}
func (ASTValue_ASTValueKind) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{3, 0} }

type RGQLTreeMutation_SubtreeOperation int32

const (
	// Add a child tree to the subtree.
	RGQLTreeMutation_SUBTREE_ADD_CHILD RGQLTreeMutation_SubtreeOperation = 0
	// Delete a tree node and all children.
	RGQLTreeMutation_SUBTREE_DELETE RGQLTreeMutation_SubtreeOperation = 1
)

var RGQLTreeMutation_SubtreeOperation_name = map[int32]string{
	0: "SUBTREE_ADD_CHILD",
	1: "SUBTREE_DELETE",
}
var RGQLTreeMutation_SubtreeOperation_value = map[string]int32{
	"SUBTREE_ADD_CHILD": 0,
	"SUBTREE_DELETE":    1,
}

func (x RGQLTreeMutation_SubtreeOperation) String() string {
	return proto.EnumName(RGQLTreeMutation_SubtreeOperation_name, int32(x))
}
func (RGQLTreeMutation_SubtreeOperation) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{5, 0}
}

type RGQLValueMutation_ValueOperation int32

const (
	// Set/create the value of this resolver.
	RGQLValueMutation_VALUE_SET RGQLValueMutation_ValueOperation = 0
	// Error this resolver (the value will enter the errored state).
	RGQLValueMutation_VALUE_ERROR RGQLValueMutation_ValueOperation = 1
	// Delete this resolver
	RGQLValueMutation_VALUE_DELETE RGQLValueMutation_ValueOperation = 2
)

var RGQLValueMutation_ValueOperation_name = map[int32]string{
	0: "VALUE_SET",
	1: "VALUE_ERROR",
	2: "VALUE_DELETE",
}
var RGQLValueMutation_ValueOperation_value = map[string]int32{
	"VALUE_SET":    0,
	"VALUE_ERROR":  1,
	"VALUE_DELETE": 2,
}

func (x RGQLValueMutation_ValueOperation) String() string {
	return proto.EnumName(RGQLValueMutation_ValueOperation_name, int32(x))
}
func (RGQLValueMutation_ValueOperation) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{8, 0}
}

type RGQLQueryFieldDirective struct {
	// Directive name
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// Optional arguments.
	Args []*FieldArgument `protobuf:"bytes,2,rep,name=args" json:"args,omitempty"`
}

func (m *RGQLQueryFieldDirective) Reset()                    { *m = RGQLQueryFieldDirective{} }
func (m *RGQLQueryFieldDirective) String() string            { return proto.CompactTextString(m) }
func (*RGQLQueryFieldDirective) ProtoMessage()               {}
func (*RGQLQueryFieldDirective) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *RGQLQueryFieldDirective) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *RGQLQueryFieldDirective) GetArgs() []*FieldArgument {
	if m != nil {
		return m.Args
	}
	return nil
}

type RGQLQueryTreeNode struct {
	// Integer ID of the node.
	Id uint32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// Name of the field this node represents.
	FieldName string `protobuf:"bytes,2,opt,name=field_name,json=fieldName" json:"field_name,omitempty"`
	// Arguments.
	Args []*FieldArgument `protobuf:"bytes,3,rep,name=args" json:"args,omitempty"`
	// Directives
	Directive []*RGQLQueryFieldDirective `protobuf:"bytes,4,rep,name=directive" json:"directive,omitempty"`
	// Children
	Children []*RGQLQueryTreeNode `protobuf:"bytes,5,rep,name=children" json:"children,omitempty"`
}

func (m *RGQLQueryTreeNode) Reset()                    { *m = RGQLQueryTreeNode{} }
func (m *RGQLQueryTreeNode) String() string            { return proto.CompactTextString(m) }
func (*RGQLQueryTreeNode) ProtoMessage()               {}
func (*RGQLQueryTreeNode) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *RGQLQueryTreeNode) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *RGQLQueryTreeNode) GetFieldName() string {
	if m != nil {
		return m.FieldName
	}
	return ""
}

func (m *RGQLQueryTreeNode) GetArgs() []*FieldArgument {
	if m != nil {
		return m.Args
	}
	return nil
}

func (m *RGQLQueryTreeNode) GetDirective() []*RGQLQueryFieldDirective {
	if m != nil {
		return m.Directive
	}
	return nil
}

func (m *RGQLQueryTreeNode) GetChildren() []*RGQLQueryTreeNode {
	if m != nil {
		return m.Children
	}
	return nil
}

type FieldArgument struct {
	Name  string    `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Value *ASTValue `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (m *FieldArgument) Reset()                    { *m = FieldArgument{} }
func (m *FieldArgument) String() string            { return proto.CompactTextString(m) }
func (*FieldArgument) ProtoMessage()               {}
func (*FieldArgument) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *FieldArgument) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *FieldArgument) GetValue() *ASTValue {
	if m != nil {
		return m.Value
	}
	return nil
}

type ASTValue struct {
	// String representation of ENUM, STRING, or OBJECT (json)
	StringValue  string                     `protobuf:"bytes,1,opt,name=string_value,json=stringValue" json:"string_value,omitempty"`
	ListValue    []*ASTValue                `protobuf:"bytes,2,rep,name=list_value,json=listValue" json:"list_value,omitempty"`
	IntValue     int32                      `protobuf:"varint,3,opt,name=int_value,json=intValue" json:"int_value,omitempty"`
	FloatValue   float32                    `protobuf:"fixed32,4,opt,name=float_value,json=floatValue" json:"float_value,omitempty"`
	BoolValue    bool                       `protobuf:"varint,5,opt,name=bool_value,json=boolValue" json:"bool_value,omitempty"`
	ObjectFields []*ASTValue_ASTObjectField `protobuf:"bytes,6,rep,name=object_fields,json=objectFields" json:"object_fields,omitempty"`
	Kind         ASTValue_ASTValueKind      `protobuf:"varint,7,opt,name=kind,enum=rgraphql.ASTValue_ASTValueKind" json:"kind,omitempty"`
}

func (m *ASTValue) Reset()                    { *m = ASTValue{} }
func (m *ASTValue) String() string            { return proto.CompactTextString(m) }
func (*ASTValue) ProtoMessage()               {}
func (*ASTValue) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *ASTValue) GetStringValue() string {
	if m != nil {
		return m.StringValue
	}
	return ""
}

func (m *ASTValue) GetListValue() []*ASTValue {
	if m != nil {
		return m.ListValue
	}
	return nil
}

func (m *ASTValue) GetIntValue() int32 {
	if m != nil {
		return m.IntValue
	}
	return 0
}

func (m *ASTValue) GetFloatValue() float32 {
	if m != nil {
		return m.FloatValue
	}
	return 0
}

func (m *ASTValue) GetBoolValue() bool {
	if m != nil {
		return m.BoolValue
	}
	return false
}

func (m *ASTValue) GetObjectFields() []*ASTValue_ASTObjectField {
	if m != nil {
		return m.ObjectFields
	}
	return nil
}

func (m *ASTValue) GetKind() ASTValue_ASTValueKind {
	if m != nil {
		return m.Kind
	}
	return ASTValue_AST_VALUE_NULL
}

type ASTValue_ASTObjectField struct {
	Key   string    `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Value *ASTValue `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (m *ASTValue_ASTObjectField) Reset()                    { *m = ASTValue_ASTObjectField{} }
func (m *ASTValue_ASTObjectField) String() string            { return proto.CompactTextString(m) }
func (*ASTValue_ASTObjectField) ProtoMessage()               {}
func (*ASTValue_ASTObjectField) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3, 0} }

func (m *ASTValue_ASTObjectField) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *ASTValue_ASTObjectField) GetValue() *ASTValue {
	if m != nil {
		return m.Value
	}
	return nil
}

// Messages
type RGQLClientMessage struct {
	MutateTree  *RGQLTreeMutation  `protobuf:"bytes,1,opt,name=mutate_tree,json=mutateTree" json:"mutate_tree,omitempty"`
	MutateField *RGQLFieldMutation `protobuf:"bytes,2,opt,name=mutate_field,json=mutateField" json:"mutate_field,omitempty"`
}

func (m *RGQLClientMessage) Reset()                    { *m = RGQLClientMessage{} }
func (m *RGQLClientMessage) String() string            { return proto.CompactTextString(m) }
func (*RGQLClientMessage) ProtoMessage()               {}
func (*RGQLClientMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *RGQLClientMessage) GetMutateTree() *RGQLTreeMutation {
	if m != nil {
		return m.MutateTree
	}
	return nil
}

func (m *RGQLClientMessage) GetMutateField() *RGQLFieldMutation {
	if m != nil {
		return m.MutateField
	}
	return nil
}

type RGQLTreeMutation struct {
	// ID of the node we are operating on.
	NodeId    uint32                            `protobuf:"varint,1,opt,name=node_id,json=nodeId" json:"node_id,omitempty"`
	Operation RGQLTreeMutation_SubtreeOperation `protobuf:"varint,2,opt,name=operation,enum=rgraphql.RGQLTreeMutation_SubtreeOperation" json:"operation,omitempty"`
	// The new node tree to add, if we are adding a child.
	Node *RGQLQueryTreeNode `protobuf:"bytes,3,opt,name=node" json:"node,omitempty"`
}

func (m *RGQLTreeMutation) Reset()                    { *m = RGQLTreeMutation{} }
func (m *RGQLTreeMutation) String() string            { return proto.CompactTextString(m) }
func (*RGQLTreeMutation) ProtoMessage()               {}
func (*RGQLTreeMutation) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *RGQLTreeMutation) GetNodeId() uint32 {
	if m != nil {
		return m.NodeId
	}
	return 0
}

func (m *RGQLTreeMutation) GetOperation() RGQLTreeMutation_SubtreeOperation {
	if m != nil {
		return m.Operation
	}
	return RGQLTreeMutation_SUBTREE_ADD_CHILD
}

func (m *RGQLTreeMutation) GetNode() *RGQLQueryTreeNode {
	if m != nil {
		return m.Node
	}
	return nil
}

type RGQLFieldMutation struct {
	// The node we are operating on.
	NodeId uint32 `protobuf:"varint,1,opt,name=node_id,json=nodeId" json:"node_id,omitempty"`
}

func (m *RGQLFieldMutation) Reset()                    { *m = RGQLFieldMutation{} }
func (m *RGQLFieldMutation) String() string            { return proto.CompactTextString(m) }
func (*RGQLFieldMutation) ProtoMessage()               {}
func (*RGQLFieldMutation) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *RGQLFieldMutation) GetNodeId() uint32 {
	if m != nil {
		return m.NodeId
	}
	return 0
}

type RGQLServerMessage struct {
	MutateValue *RGQLValueMutation `protobuf:"bytes,1,opt,name=mutate_value,json=mutateValue" json:"mutate_value,omitempty"`
}

func (m *RGQLServerMessage) Reset()                    { *m = RGQLServerMessage{} }
func (m *RGQLServerMessage) String() string            { return proto.CompactTextString(m) }
func (*RGQLServerMessage) ProtoMessage()               {}
func (*RGQLServerMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *RGQLServerMessage) GetMutateValue() *RGQLValueMutation {
	if m != nil {
		return m.MutateValue
	}
	return nil
}

type RGQLValueMutation struct {
	// The ID of the resolver execution (the value identifier).
	ValueNodeId uint32 `protobuf:"varint,1,opt,name=value_node_id,json=valueNodeId" json:"value_node_id,omitempty"`
	// The ID of the parent resolver execution (the parent value identifier).
	ParentValueNodeId uint32 `protobuf:"varint,2,opt,name=parent_value_node_id,json=parentValueNodeId" json:"parent_value_node_id,omitempty"`
	// The ID of the query node (the query identifier).
	QueryNodeId uint32 `protobuf:"varint,3,opt,name=query_node_id,json=queryNodeId" json:"query_node_id,omitempty"`
	// The operation on the value.
	Operation RGQLValueMutation_ValueOperation `protobuf:"varint,4,opt,name=operation,enum=rgraphql.RGQLValueMutation_ValueOperation" json:"operation,omitempty"`
	// The actual value itself
	ValueJson string `protobuf:"bytes,5,opt,name=value_json,json=valueJson" json:"value_json,omitempty"`
}

func (m *RGQLValueMutation) Reset()                    { *m = RGQLValueMutation{} }
func (m *RGQLValueMutation) String() string            { return proto.CompactTextString(m) }
func (*RGQLValueMutation) ProtoMessage()               {}
func (*RGQLValueMutation) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *RGQLValueMutation) GetValueNodeId() uint32 {
	if m != nil {
		return m.ValueNodeId
	}
	return 0
}

func (m *RGQLValueMutation) GetParentValueNodeId() uint32 {
	if m != nil {
		return m.ParentValueNodeId
	}
	return 0
}

func (m *RGQLValueMutation) GetQueryNodeId() uint32 {
	if m != nil {
		return m.QueryNodeId
	}
	return 0
}

func (m *RGQLValueMutation) GetOperation() RGQLValueMutation_ValueOperation {
	if m != nil {
		return m.Operation
	}
	return RGQLValueMutation_VALUE_SET
}

func (m *RGQLValueMutation) GetValueJson() string {
	if m != nil {
		return m.ValueJson
	}
	return ""
}

func init() {
	proto.RegisterType((*RGQLQueryFieldDirective)(nil), "rgraphql.RGQLQueryFieldDirective")
	proto.RegisterType((*RGQLQueryTreeNode)(nil), "rgraphql.RGQLQueryTreeNode")
	proto.RegisterType((*FieldArgument)(nil), "rgraphql.FieldArgument")
	proto.RegisterType((*ASTValue)(nil), "rgraphql.ASTValue")
	proto.RegisterType((*ASTValue_ASTObjectField)(nil), "rgraphql.ASTValue.ASTObjectField")
	proto.RegisterType((*RGQLClientMessage)(nil), "rgraphql.RGQLClientMessage")
	proto.RegisterType((*RGQLTreeMutation)(nil), "rgraphql.RGQLTreeMutation")
	proto.RegisterType((*RGQLFieldMutation)(nil), "rgraphql.RGQLFieldMutation")
	proto.RegisterType((*RGQLServerMessage)(nil), "rgraphql.RGQLServerMessage")
	proto.RegisterType((*RGQLValueMutation)(nil), "rgraphql.RGQLValueMutation")
	proto.RegisterEnum("rgraphql.ASTValue_ASTValueKind", ASTValue_ASTValueKind_name, ASTValue_ASTValueKind_value)
	proto.RegisterEnum("rgraphql.RGQLTreeMutation_SubtreeOperation", RGQLTreeMutation_SubtreeOperation_name, RGQLTreeMutation_SubtreeOperation_value)
	proto.RegisterEnum("rgraphql.RGQLValueMutation_ValueOperation", RGQLValueMutation_ValueOperation_name, RGQLValueMutation_ValueOperation_value)
}

func init() { proto.RegisterFile("src/rgraphql.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 808 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x94, 0x55, 0xcd, 0x6e, 0xdb, 0x46,
	0x10, 0x36, 0x29, 0xca, 0x16, 0x87, 0x92, 0xb2, 0xde, 0xa6, 0xb0, 0x90, 0xc0, 0x88, 0xc2, 0x93,
	0xd0, 0x14, 0x36, 0xaa, 0x1c, 0x7a, 0x28, 0xda, 0x42, 0xb6, 0xe8, 0x44, 0x29, 0x2d, 0x21, 0x2b,
	0xca, 0x87, 0x5e, 0x08, 0x4a, 0xdc, 0x28, 0x4c, 0x68, 0x52, 0x59, 0x52, 0x06, 0xf2, 0x16, 0x7d,
	0x96, 0xde, 0x7a, 0xe8, 0xeb, 0x14, 0xe8, 0x5b, 0x14, 0x9c, 0x25, 0x45, 0x51, 0x95, 0xfa, 0x73,
	0xdb, 0xfd, 0xf6, 0xfb, 0xbe, 0x99, 0x9d, 0xd9, 0x21, 0x81, 0x26, 0x62, 0x71, 0x29, 0x96, 0xc2,
	0x5b, 0xbd, 0xff, 0x14, 0x5e, 0xac, 0x44, 0x9c, 0xc6, 0xb4, 0x51, 0xec, 0xcd, 0x9f, 0xe1, 0x8c,
	0xbd, 0x7a, 0x6b, 0xbf, 0x5d, 0x73, 0xf1, 0xf9, 0x26, 0xe0, 0xa1, 0x3f, 0x0c, 0x04, 0x5f, 0xa4,
	0xc1, 0x03, 0xa7, 0x14, 0xb4, 0xc8, 0xbb, 0xe7, 0x1d, 0xa5, 0xab, 0xf4, 0x74, 0x86, 0x6b, 0xfa,
	0x02, 0x34, 0x4f, 0x2c, 0x93, 0x8e, 0xda, 0xad, 0xf5, 0x8c, 0xfe, 0xd9, 0xc5, 0xc6, 0x17, 0xb5,
	0x03, 0xb1, 0x5c, 0xdf, 0xf3, 0x28, 0x65, 0x48, 0x32, 0xff, 0x54, 0xe0, 0x74, 0x63, 0xee, 0x08,
	0xce, 0xc7, 0xb1, 0xcf, 0x69, 0x1b, 0xd4, 0xc0, 0x47, 0xd3, 0x16, 0x53, 0x03, 0x9f, 0x9e, 0x03,
	0xbc, 0xcb, 0xc4, 0x2e, 0x06, 0x53, 0x31, 0x98, 0x8e, 0xc8, 0x78, 0x3b, 0x62, 0xed, 0x3f, 0x44,
	0xa4, 0x3f, 0x82, 0xee, 0x17, 0xf9, 0x77, 0x34, 0x54, 0x3c, 0x2f, 0x15, 0x07, 0x2e, 0xca, 0x4a,
	0x0d, 0xfd, 0x16, 0x1a, 0x8b, 0xf7, 0x41, 0xe8, 0x0b, 0x1e, 0x75, 0xea, 0xa8, 0x7f, 0xba, 0x47,
	0x5f, 0xdc, 0x85, 0x6d, 0xc8, 0xe6, 0x2d, 0xb4, 0x2a, 0x09, 0xed, 0xad, 0x5e, 0x0f, 0xea, 0x0f,
	0x5e, 0xb8, 0x96, 0xb7, 0x34, 0xfa, 0xb4, 0xb4, 0x1e, 0x4c, 0x9d, 0xbb, 0xec, 0x84, 0x49, 0x82,
	0xf9, 0xbb, 0x06, 0x8d, 0x02, 0xa3, 0xcf, 0xa1, 0x99, 0xa4, 0x22, 0x88, 0x96, 0xae, 0x54, 0x4b,
	0x4b, 0x43, 0x62, 0x92, 0xf2, 0x0d, 0x40, 0x18, 0x24, 0xa9, 0x5b, 0xd8, 0xd7, 0x0e, 0xd8, 0xeb,
	0x19, 0x4b, 0x4a, 0x9e, 0x82, 0x1e, 0x44, 0x85, 0xa2, 0xd6, 0x55, 0x7a, 0x75, 0xd6, 0x08, 0xa2,
	0xfc, 0xf0, 0x19, 0x18, 0xef, 0xc2, 0xd8, 0x2b, 0x8e, 0xb5, 0xae, 0xd2, 0x53, 0x19, 0x20, 0x24,
	0x09, 0xe7, 0x00, 0xf3, 0x38, 0x0e, 0xf3, 0xf3, 0x7a, 0x57, 0xe9, 0x35, 0x98, 0x9e, 0x21, 0xf2,
	0xf8, 0x06, 0x5a, 0xf1, 0xfc, 0x03, 0x5f, 0xa4, 0x2e, 0x76, 0x32, 0xe9, 0x1c, 0xef, 0x36, 0xa3,
	0x48, 0x29, 0x5b, 0x4c, 0x90, 0x8a, 0xf5, 0x63, 0xcd, 0xb8, 0xdc, 0x24, 0xf4, 0x25, 0x68, 0x1f,
	0x83, 0xc8, 0xef, 0x9c, 0x74, 0x95, 0x5e, 0xbb, 0xff, 0x6c, 0xbf, 0x1c, 0x17, 0x3f, 0x05, 0x91,
	0xcf, 0x90, 0xfc, 0xc4, 0x86, 0x76, 0xd5, 0x94, 0x12, 0xa8, 0x7d, 0xe4, 0x9f, 0xf3, 0xc2, 0x65,
	0xcb, 0xff, 0xd1, 0x8a, 0x5f, 0x15, 0x68, 0x6e, 0x07, 0xa1, 0x14, 0xed, 0xdd, 0xbb, 0x81, 0x3d,
	0xb3, 0xdc, 0xf1, 0xcc, 0xb6, 0xc9, 0x11, 0x7d, 0x0c, 0xa4, 0xc4, 0xa6, 0x0e, 0x1b, 0x8d, 0x5f,
	0x11, 0xa5, 0xca, 0xb4, 0xc6, 0xb3, 0x5b, 0xa2, 0xd2, 0x53, 0x68, 0x95, 0xd8, 0x68, 0xec, 0x90,
	0x1a, 0xfd, 0x02, 0x1e, 0x95, 0xd0, 0x8d, 0x3d, 0x19, 0x38, 0x44, 0xab, 0x6a, 0xaf, 0x26, 0x13,
	0x9b, 0xd4, 0xab, 0x98, 0x3d, 0x9a, 0x3a, 0xe4, 0xb8, 0x1a, 0x79, 0x72, 0xf5, 0xc6, 0xba, 0x76,
	0xc8, 0x89, 0xf9, 0x4b, 0x3e, 0x7a, 0xd7, 0x61, 0xc0, 0xa3, 0xf4, 0x96, 0x27, 0x89, 0xb7, 0xe4,
	0xf4, 0x3b, 0x30, 0xee, 0xd7, 0xa9, 0x97, 0x72, 0x37, 0x15, 0x5c, 0xbe, 0x23, 0xa3, 0xff, 0xa4,
	0xfa, 0xc0, 0xb3, 0xb7, 0x7d, 0x9b, 0x91, 0x82, 0x38, 0x62, 0x20, 0xe9, 0x19, 0x46, 0x7f, 0x80,
	0x66, 0x2e, 0xc6, 0x96, 0xe6, 0x85, 0xdb, 0x19, 0x0f, 0x2c, 0xf7, 0x46, 0x9e, 0x47, 0x43, 0xd0,
	0xfc, 0x43, 0x01, 0xb2, 0x1b, 0x80, 0x9e, 0xc1, 0x49, 0x14, 0xfb, 0xdc, 0xdd, 0x7c, 0x11, 0x8e,
	0xb3, 0xed, 0xc8, 0xa7, 0x23, 0xd0, 0xe3, 0x15, 0x17, 0xc8, 0xc2, 0x50, 0xed, 0xfe, 0x8b, 0xc3,
	0x89, 0x5e, 0x4c, 0xd7, 0xf3, 0xec, 0x4a, 0x93, 0x42, 0xc2, 0x4a, 0x35, 0xbd, 0x04, 0x2d, 0x33,
	0xc5, 0x37, 0xfe, 0x2f, 0xf3, 0x8c, 0x44, 0xf3, 0x7b, 0x20, 0xbb, 0x7e, 0xf4, 0x4b, 0x38, 0x9d,
	0xce, 0xae, 0x1c, 0x66, 0x59, 0xee, 0x60, 0x38, 0x74, 0xaf, 0x5f, 0x8f, 0xec, 0x21, 0x39, 0xca,
	0x3a, 0x52, 0xc0, 0x43, 0xcb, 0xb6, 0x1c, 0x8b, 0x28, 0xe6, 0xd7, 0xb2, 0xf4, 0x95, 0x52, 0x1c,
	0xbc, 0xa8, 0x39, 0x95, 0xec, 0x29, 0x17, 0x0f, 0x5c, 0x14, 0x8d, 0x2a, 0x6b, 0x5d, 0x4e, 0xfc,
	0xdf, 0x52, 0xc7, 0x17, 0xb9, 0x5b, 0x6b, 0x04, 0xcd, 0xdf, 0x54, 0xe9, 0x5a, 0xa1, 0x50, 0x13,
	0x5a, 0x68, 0xe7, 0x56, 0x33, 0x31, 0x10, 0x1c, 0xcb, 0xba, 0x5f, 0xc2, 0xe3, 0x95, 0x27, 0x78,
	0xf1, 0x61, 0xd8, 0x50, 0x55, 0xa4, 0x9e, 0xca, 0xb3, 0xbb, 0x2d, 0x81, 0x09, 0xad, 0x4f, 0x59,
	0x0d, 0x37, 0xcc, 0x9a, 0x34, 0x45, 0x30, 0xe7, 0xbc, 0xde, 0x6e, 0xa6, 0x86, 0xcd, 0xfc, 0xea,
	0x1f, 0xee, 0x72, 0x81, 0xbb, 0xbd, 0xbd, 0x3c, 0x07, 0x90, 0x79, 0x7d, 0x48, 0xe2, 0x08, 0x3f,
	0x3b, 0x3a, 0xd3, 0x11, 0x79, 0x93, 0xc4, 0x91, 0x79, 0x05, 0xed, 0xaa, 0x96, 0xb6, 0x40, 0xcf,
	0x87, 0xd2, 0x72, 0xc8, 0x11, 0x7d, 0x04, 0x46, 0x3e, 0x8d, 0x8c, 0x4d, 0x18, 0x51, 0x28, 0x81,
	0xa6, 0x04, 0xf2, 0xf6, 0xa9, 0xf3, 0x63, 0xfc, 0x45, 0xbe, 0xfc, 0x2b, 0x00, 0x00, 0xff, 0xff,
	0xe5, 0x30, 0x4e, 0x18, 0x38, 0x07, 0x00, 0x00,
}
